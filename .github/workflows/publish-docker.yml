name: Publish Docker Images to GCR and ACR
on:
  workflow_call:
    inputs:
      new-tag:
        required: true
        type: string
    secrets:
      ACR_SP_PASSWORD:
        required: true
      ACR_SP_USER:
        required: true
      BROADBOT_TOKEN:
        required: true
    
env:
  SERVICE_NAME: ${{ github.event.repository.name }}
  GCR_REGISTRY: us.gcr.io
  ACR_REGISTRY: terradevacrpublic.azurecr.io
  GOOGLE_PROJECT: broad-dsp-gcr-public

jobs:
  publish-docker-job:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Look for AJ (Analysis Journeys) Jira ID in the commit message
        id: find-jira-id
        run: |
          set +e
          JIRA_ID=$(echo "${{ github.event.head_commit.message }}" | grep -iEo -m 1 'AJ-[0-9]+' | head -1 || '')
          if [[ -z "$JIRA_ID" ]]; then
            echo "JIRA_ID=missing" >> $GITHUB_OUTPUT
          else 
            echo "JIRA_ID=${JIRA_ID}" >> $GITHUB_OUTPUT
          fi
          set -e

      - name: Set commit short hash
        id: setHash
        run: |
          git_short_sha=$(git rev-parse --short HEAD)
          echo $git_short_sha
          echo "git_short_sha=${git_short_sha}" >> $GITHUB_OUTPUT
      - name: Construct GCR docker image name
        id: gcr-image-name
        run: echo "name=${GCR_REGISTRY}/${GOOGLE_PROJECT}/${SERVICE_NAME}" >> $GITHUB_OUTPUT

      - name: Construct ACR docker image name
        id: acr-image-name
        run: echo "name=${ACR_REGISTRY}/${SERVICE_NAME}" >> $GITHUB_OUTPUT

      - name: Build image locally with jib
        run: |
          ./gradlew --build-cache jibDockerBuild \
          --image=${{ steps.gcr-image-name.outputs.name }}:${{ steps.setHash.outputs.git_short_sha }} \
          -Djib.console=plain
          
      - name: Add version tag to GCR
        run: docker image tag ${{ steps.gcr-image-name.outputs.name }}:${{ steps.setHash.outputs.git_short_sha }} ${{ steps.gcr-image-name.outputs.name }}:${{ inputs.new-tag }}
          
      - name: Run Trivy vulnerability scanner
        # Link to the github location of the action https://github.com/broadinstitute/dsp-appsec-trivy-action
        uses: broadinstitute/dsp-appsec-trivy-action@v1
        with:
          image: ${{ steps.gcr-image-name.outputs.name }}:${{ steps.setHash.outputs.git_short_sha }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v0

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v0'
        with:
          # Centralized in dsp-tools-k8s; ask in #dsp-devops-champions for help troubleshooting
          workload_identity_provider: 'projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider'
          service_account: 'gcr-publish@broad-dsp-gcr-public.iam.gserviceaccount.com'

      - name: Explicitly auth Docker for GCR
        run: gcloud auth configure-docker --quiet

      - name: Push GCR image
        if: ${{ false }} # disable while debugging
        run: docker push --all-tags ${{ steps.gcr-image-name.outputs.name }}

      - name: Re-tag image for ACR
        if: ${{ false }} # disable while debugging
        run: docker tag ${{ steps.gcr-image-name.outputs.name }}:${{ steps.setHash.outputs.git_short_sha }} ${{ steps.acr-image-name.outputs.name }}:${{ steps.setHash.outputs.git_short_sha }}

      - name: Add version tag to ACR
        if: ${{ false }} # disable while debugging
        run: docker image tag ${{ steps.acr-image-name.outputs.name }}:${{ steps.setHash.outputs.git_short_sha }} ${{ steps.acr-image-name.outputs.name }}:${{ inputs.new-tag }}

      - name: Push image to Azure
        if: ${{ false }} # disable while debugging
        run: |
          echo ${{ secrets.ACR_SP_PASSWORD }} | docker login ${ACR_REGISTRY} \
          --username ${{ secrets.ACR_SP_USER }} \
          --password-stdin
          docker push --all-tags ${{ steps.acr-image-name.outputs.name }}
          
      - name: Clone terra-helm
        uses: actions/checkout@v3
        with:
          repository: broadinstitute/terra-helmfile
          token: ${{ secrets.BROADBOT_TOKEN }} # Has to be set at checkout AND later when pushing to work
          path: terra-helmfile
          
      - name: Create terra-helm PR for latest WDS version
        env:
          BROADBOT_TOKEN: ${{ secrets.BROADBOT_TOKEN }}
          GH_TOKEN: ${{ secrets.BROADBOT_TOKEN }}
        run: |
          set -e
          JIRA_ID=${{ steps.find-jira-id.outputs.JIRA_ID }}
          if [[ $JIRA_ID == "missing" ]]; then
            echo "JIRA_ID missing, PR to terra-helm will not be created"
            exit 0;
          fi
          cd terra-helmfile
          HELM_CUR_TAG=$(grep "/terra-workspace-data-service:" terra-helmfile/tree/master/charts/wds/values.yaml | sed "s,.*/terra-workspace-data-service:,,")
          HELM_NEW_TAG=${{ inputs.new-tag }}
          git checkout -b ${JIRA_ID}-auto-update-${HELM_NEW_TAG}
          [[ -n "$HELM_CUR_TAG" && -n "$HELM_NEW_TAG" ]]
          sed -i "s/$HELM_CUR_TAG/$HELM_NEW_TAG/" terra-batch-libchart/values.yaml
          git config --global user.name "broadbot"
          git config --global user.email "broadbot@broadinstitute.org"
          git commit -am "${JIRA_ID}: Auto update WDS version to $HELM_NEW_TAG"
          git push -u origin ${JIRA_ID}-auto-update-${HELM_NEW_TAG}
          gh pr create --title "${JIRA_ID}: auto update WDS version to $HELM_NEW_TAG" --body "${JIRA_ID} helm chart update" --label "automerge"
