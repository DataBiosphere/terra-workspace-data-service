name: Publish contract tests
on:
  pull_request:
    branches:
      - main
    paths-ignore: [ '**.md' ]
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
    paths-ignore: [ '**.md' ]

env:
  WDS_RUN_ID: ${{ github.event.repository.name }}-${{ github.run_id }}
  PUBLISH_CONTRACT_RUN_NAME: 'publish-contracts-${{ github.event.repository.name }}-${{ github.run_id }}-${{ github.run_attempt }}'
  WDS_PACTS_ARTIFACT: wds-pacts-${{ github.event.repository.name }}-${{ github.run_id }}
  WDS_PACTS_OUTPUT_DIR: service/build/pacts/
  CAN_I_DEPLOY_RUN_NAME: 'can-i-deploy-${{ github.event.repository.name }}-${{ github.run_id }}-${{ github.run_attempt }}'

jobs:
  # The primary objective of this section is to carefully control the dispatching of tags,
  # ensuring it only occurs during the 'Tag, publish, deploy' workflow.
  # However, a challenge arises with contract tests, as they require knowledge of the upcoming tag
  # before the actual deployment. To address this, we leverage the dry run feature provided by bumper.
  # This allows us to obtain the next tag for publishing contracts and verifying consumer pacts without
  # triggering the tag dispatch. This approach sidesteps the need for orchestrating multiple workflows,
  # simplifying our implementation.
  #
  # We regulate the tag job to meet the following requirements according to the trigger event type:
  # 1. pull_request event (due to opening or updating of PR branch):
  #      dry-run flag is set to false
  #         this allows the new semver tag #major.#minor.#patch-#commit to be used to identity pacticipant version for development purpose
  #         PR has no effect on the value of the latest tag in settings.gradle on disk
  # 2. PR merge to main, this triggers a push event on the main branch:
  #      dry-run flag is set to true
  #         this allows the new semver tag #major.#minor.#patch to be used to identity pacticipant version, and
  #         this action will not update the value of the latest tag in settings.gradle on disk
  #
  # Note: All workflows from the same PR merge should have the same copy of settings.gradle on disk,
  # which should be the one from the HEAD of the main branch before the workflow starts running
  app-context:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.get-app-context.outputs.app_version }}
      app_branch: ${{ steps.get-app-context.outputs.app_branch }}
      app_sha: ${{ steps.get-app-context.outputs.app_sha }}
    steps:
      - name: Action Type
        run: |
          echo "Action Type: ${{ github.event.action }}"

      - name: Determine App Context
        id: get-app-context
        uses: ./.github/actions/get-app-context
        with:
          gh_repo: ${{ github.repository }}
          max_retries: 20
          sleep_time: 3
        env:
          GITHUB_TOKEN: ${{ secrets.BROADBOT_TOKEN }}

      - name: App Context Properties
        run: |
          echo "APP_VERSION=${{ env.APP_VERSION }}"
          echo "APP_BRANCH=${{ env.APP_BRANCH }}"
          echo "APP_SHA=${{ env.APP_SHA }}"
          echo "APP_SHORT_SHA=${{ env.APP_SHORT_SHA }}"
          echo "app_version=${{ steps.get-app-context.outputs.app_version }}"
          echo "app_branch=${{ steps.get-app-context.outputs.app_branch }}"
          echo "app_sha=${{ steps.get-app-context.outputs.app_sha }}"
          echo "app_short_sha=${{ steps.get-app-context.outputs.app_short_sha }}"

  run-consumer-contract-tests:
    if: false
    runs-on: ubuntu-latest
    needs: [ app-context ]
    outputs:
      pact-paths: ${{ steps.locate-pacts.outputs.pact-paths }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.app-context.outputs.app_sha }}
          token: ${{ secrets.BROADBOT_TOKEN }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Run consumer tests
        run: ./gradlew pactTests

      - name: Locate pact files
        id: locate-pacts
        run: |
          pactPaths=$(find "$WDS_PACTS_OUTPUT_DIR" -type f -name "*.json" | jq -cnR "[inputs]")
          echo "pact-paths=$pactPaths" >> $GITHUB_OUTPUT

      - name: Upload pact files to artifact
        id: upload-pacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WDS_PACTS_ARTIFACT }}
          path: ${{ env.WDS_PACTS_OUTPUT_DIR }}
          retention-days: 1

  publish-pacts-job:
    if: false
    runs-on: ubuntu-latest
    needs: [ app-context, run-consumer-contract-tests ]
    strategy:
      matrix:
        pact_path: ${{ fromJson(needs.run-consumer-contract-tests.outputs.pact-paths) }}
    steps:
      - name: App Context Summary
        run: |
          echo "App Branch: ${{ needs.app-context.outputs.app_branch }}"
          echo "App Version: ${{ needs.app-context.outputs.app_version }}"

      - name: Download pact files from artifact
        id: download-pacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WDS_PACTS_ARTIFACT }}
          path: ${{ env.WDS_PACTS_OUTPUT_DIR }}

      - name: Encode pact as non-breaking base64 string
        id: encode-pact
        run: |
          nonBreakingB64=$(cat "${{ matrix.pact_path }}" | base64 -w 0)
          echo "pact-b64=${nonBreakingB64}" >> $GITHUB_OUTPUT

      - name: Dispatch to terra-github-workflows
        uses: broadinstitute/workflow-dispatch@v4
        with:
          run-name: '${{ env.PUBLISH_CONTRACT_RUN_NAME }}-${{ matrix.pact_path }}'
          workflow: .github/workflows/publish-contracts.yaml
          repo: broadinstitute/terra-github-workflows
          ref: refs/heads/main
          token: ${{ secrets.BROADBOT_TOKEN }} # github token for access to kick off a job in the private repo
          inputs: '{
            "run-name": "${{ env.PUBLISH_CONTRACT_RUN_NAME }}-${{ matrix.pact_path }}",
            "pact-b64": "${{ steps.encode-pact.outputs.pact-b64 }}",
            "repo-owner": "${{ github.repository_owner }}",
            "repo-name": "${{ github.event.repository.name }}",
            "repo-branch": "${{ needs.app-context.outputs.app_branch }}",
            "release-tag": "${{ needs.app-context.outputs.app_version }}"
          }'

  can-i-deploy: # The can-i-deploy job will run as a result of a PR. It reports the pact verification statuses on all deployed environments.
    if: false
    runs-on: ubuntu-latest
    needs: [ app-context, publish-pacts-job ]
    strategy:
      matrix:
        pacticipant-name: ["wds", "cwds"]
    steps:
      - name: Dispatch to terra-github-workflows
        uses: broadinstitute/workflow-dispatch@v4
        with:
          run-name: "${{ env.CAN_I_DEPLOY_RUN_NAME }}-${{ matrix.pacticipant-name }}"
          workflow: .github/workflows/can-i-deploy.yaml
          repo: broadinstitute/terra-github-workflows
          ref: refs/heads/main
          token: ${{ secrets.BROADBOT_TOKEN }} # github token for access to kick off a job in the private repo
          inputs: '{
            "run-name": "${{ env.CAN_I_DEPLOY_RUN_NAME }}-${{ matrix.pacticipant-name }}",
            "pacticipant": "${{ matrix.pacticipant-name }}",
            "version": "${{ needs.app-context.outputs.app_version }}"
          }'
