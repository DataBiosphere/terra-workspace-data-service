name: Publish contract tests
on:
  pull_request:
    branches:
      - main
    paths-ignore: [ '**.md' ]
  push:
    branches:
      - main
    paths-ignore: [ '**.md' ]

jobs:
  init-github-context:
    runs-on: ubuntu-latest
    outputs:
      sha-short: ${{ steps.extract-branch.outputs.sha-short }}
      repo-branch: ${{ steps.extract-branch.outputs.repo-branch }}
      repo-version: ${{ steps.extract-branch.outputs.repo-version }}

    steps:
      - uses: actions/checkout@v3

      - name: Extract branch
        id: extract-branch
        run: |
          GITHUB_EVENT_NAME=${{ github.event_name }}
          if [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
            GITHUB_REF=${{ github.ref }}
            GITHUB_SHA=${{ github.sha }}
          elif [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            GITHUB_REF=refs/heads/${{ github.head_ref }}
            GITHUB_SHA=${{ github.event.pull_request.head.sha }}
          elif [[ "$GITHUB_EVENT_NAME" == "merge_group" ]]; then
            GITHUB_REF=refs/heads/${{ github.head_ref }}
          else
            echo "Failed to extract branch information"
            exit 1
          fi
          echo "repo-branch=${GITHUB_REF/refs\/heads\//""}" >> $GITHUB_OUTPUT
          echo "repo-version=${GITHUB_SHA}" >> $GITHUB_OUTPUT
      - name: Echo repo and branch information
        run: |
          echo "repo-owner=${{ github.repository_owner }}"
          echo "repo-name=${{ github.event.repository.name }}"
          echo "repo-branch=${{ steps.extract-branch.outputs.repo-branch }}"
          echo "repo-version=${{ steps.extract-branch.outputs.repo-version }}"

  run-consumer-contract-tests:
    runs-on: ubuntu-latest
    needs: [ init-github-context ]
    outputs:
      pact-b64: ${{ steps.encode-pact.outputs.pact-b64 }}
      pact-paths: ${{ steps.locate-pacts.outputs.pact-paths }}

    steps:
      - name: Checkout current code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Run consumer tests
        run: ./gradlew pactTests

      - name: Locate all pact json files
        id: locate-pacts
        run: |
          pactOutputDir="service/build/pacts"

          # Locate .json pact files in $pactOutputDir
          pactPaths=($(find "$pactOutputDir" -type f -name "*.json"))

          # Put the pact file paths in JSON string
          pactPathsJson="["

          # Loop through $pactPaths and append its elements to JSON string
          for path in "${pactPaths[@]}"; do
              pactPathsJson="${pactPathsJson}\"$path\", "
          done

          pactPathsJson="${pactPathsJson%, }]"

          echo "$pactPathsJson"
          echo "pact-paths=$pactPathsJson" >> $GITHUB_OUTPUT

  pact-paths-job:
    runs-on: ubuntu-latest
    needs: [ run-consumer-contract-tests ]
    strategy:
      matrix:
        pact_path: ${{ fromJson(needs.run-consumer-contract-tests.outputs.pact-paths) }}

    steps:
      - name: echo paths
        run: |
          echo ${{ matrix.pact_path }}
          NON_BREAKING_B64=$(cat ${{ matrix.pact_path }} | base64 -w 0)
          echo $NON_BREAKING_B64
