name: Build and Test

on:
  pull_request:
    branches:
      - main
    paths-ignore: [ '**.md' ]
    # By default, a workflow only runs when a pull_request event's activity type is opened, synchronize, or reopened.
    # types: [opened, synchronize, reopened]
  push:
    branches:
      - main
    paths-ignore: [ '**.md' ]

jobs:
  # The app-context job retrieves the App Context artifact that was uploaded
  # through the compute-app-context.yml workflow. If the last commit was
  # a version file bump, this workflow is skipped. Additionally, this workflow
  # runs when a PR targeting mainline is opened, updated (with merge commit or rebase),
  # or when there is a push to the mainline branch.
  app-context:
    if: "github.event.head_commit.committer.name != 'bumptabot'"
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.get-app-context.outputs.app_version }}
      app_branch: ${{ steps.get-app-context.outputs.app_branch }}
      app_sha: ${{ steps.get-app-context.outputs.app_sha }}
    steps:
      - uses: actions/checkout@v4
      - name: Action Type
        run: |
          echo "Action Type: ${{ github.event.action }}"

      - name: Determine App Context
        id: get-app-context
        uses: ./.github/actions/get-app-context
        with:
          gh_repo: ${{ github.repository }}
          max_retries: 20
          sleep_time: 3
        env:
          GITHUB_TOKEN: ${{ secrets.BROADBOT_TOKEN }}

      - name: App Context Properties
        run: |
          echo "APP_VERSION=${{ env.APP_VERSION }}"
          echo "APP_BRANCH=${{ env.APP_BRANCH }}"
          echo "APP_SHA=${{ env.APP_SHA }}"
          echo "APP_SHORT_SHA=${{ env.APP_SHORT_SHA }}"
          echo "app_version=${{ steps.get-app-context.outputs.app_version }}"
          echo "app_branch=${{ steps.get-app-context.outputs.app_branch }}"
          echo "app_sha=${{ steps.get-app-context.outputs.app_sha }}"
          echo "app_short_sha=${{ steps.get-app-context.outputs.app_short_sha }}"

  build:
    runs-on: ubuntu-latest
    needs: [ app-context ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.app-context.outputs.app_sha }}
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build all projects without running tests
        run: ./gradlew --build-cache build -x test

  unit-tests:
    needs: [ app-context, build ]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5432:5432" ]

    steps:
      - uses: actions/checkout@v4
        # Needed by sonar to get the git history for the branch the PR will be merged into.
        with:
          ref: ${{ needs.app-context.outputs.app_sha }}
          fetch-depth: 0

      - name: Initialize Postgres DB
        env:
          PGPASSWORD: postgres
        run: psql -h 127.0.0.1 -U postgres -f ./local-dev/local-postgres-init.sql

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build, assemble, and test
        id: build-test
        run: ./gradlew --build-cache --scan test jacocoTestReport

      # The SonarQube scan is done here, so it can upload the coverage report generated by the tests.
      - name: SonarQube scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew --build-cache sonar

      - name: Upload Test Reports
        if: steps.build-test.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: Test Reports
          path: service/build/reports
          retention-days: 14

  # Publish Docker image to Google and Azure Container Registries, also reports to sherlock
  docker-image-job:
    needs: [ app-context, build ]
    uses: ./.github/workflows/publish-docker.yml
    with:
      new-tag: ${{ needs.app-context.outputs.app_version }}
    secrets:
      ACR_SP_PASSWORD: ${{ secrets.ACR_SP_PASSWORD }}
      ACR_SP_USER: ${{ secrets.ACR_SP_USER }}
