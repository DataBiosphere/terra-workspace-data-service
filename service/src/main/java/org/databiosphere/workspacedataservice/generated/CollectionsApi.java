/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.databiosphere.workspacedataservice.generated;

import org.databiosphere.workspacedataservice.generated.ErrorResponseServerModel;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Collections", description = "Collection APIs")
public interface CollectionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /collections/{collectionId} : Create a collection
     * Create a collection with the given UUID.
     *
     * @param collectionUuid WDS collection id; by convention equal to workspace id (required)
     * @return Success (status code 201)
     *         or Conflict - schema already exists. (status code 409)
     */
    @Operation(
        operationId = "createCollectionV1",
        summary = "Create a collection",
        description = "Create a collection with the given UUID.",
        tags = { "Collections" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Success"),
            @ApiResponse(responseCode = "409", description = "Conflict - schema already exists.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseServerModel.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/collections/{collectionId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> createCollectionV1(
        @Parameter(name = "collectionUuid", description = "WDS collection id; by convention equal to workspace id", required = true, in = ParameterIn.PATH) @PathVariable("collectionUuid") UUID collectionUuid
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /collections/{collectionId} : Delete a collection
     * Delete the collection with the given UUID. This API is liable to change.  THIS WILL DELETE ALL DATA WITHIN THE COLLECTION. Be certain this is what you want to do. 
     *
     * @param collectionUuid WDS collection id; by convention equal to workspace id (required)
     * @return Success (status code 200)
     *         or Not Found - collection does not exist. (status code 404)
     */
    @Operation(
        operationId = "deleteCollectionV1",
        summary = "Delete a collection",
        description = "Delete the collection with the given UUID. This API is liable to change.  THIS WILL DELETE ALL DATA WITHIN THE COLLECTION. Be certain this is what you want to do. ",
        tags = { "Collections" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success"),
            @ApiResponse(responseCode = "404", description = "Not Found - collection does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseServerModel.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/collections/{collectionId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteCollectionV1(
        @Parameter(name = "collectionUuid", description = "WDS collection id; by convention equal to workspace id", required = true, in = ParameterIn.PATH) @PathVariable("collectionUuid") UUID collectionUuid
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /collections : List collections
     * List all collections in this server.
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "listCollectionsV1",
        summary = "List collections",
        description = "List all collections in this server.",
        tags = { "Collections" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UUID.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/collections",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UUID>> listCollectionsV1(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
