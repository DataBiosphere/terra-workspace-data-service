/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.databiosphere.workspacedataservice.generated;

import org.databiosphere.workspacedataservice.generated.GenericJobServerModel;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "Job", description = "Job APIs")
public interface JobApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /job/v1/{jobId} : Get status of a long-running job.
     *
     * @param jobId  (required)
     * @return Job completed. (status code 200)
     *         or Job still running. (status code 202)
     */
    @Operation(
        operationId = "jobStatusV1",
        summary = "Get status of a long-running job.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Job completed.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericJobServerModel.class))
            }),
            @ApiResponse(responseCode = "202", description = "Job still running.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericJobServerModel.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job/v1/{jobId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GenericJobServerModel> jobStatusV1(
        @Parameter(name = "jobId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("jobId") UUID jobId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /job/v1/instance/{instanceUuid} : Get all jobs with a certain status under a particular instance.
     *
     * @param instanceUuid WDS instance id; by convention equal to workspace id (required)
     * @param statuses  (optional)
     * @return A list of jobs with specified status for Instance Id. (status code 200)
     */
    @Operation(
        operationId = "jobsInInstanceV1",
        summary = "Get all jobs with a certain status under a particular instance.",
        tags = { "Job" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of jobs with specified status for Instance Id.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GenericJobServerModel.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job/v1/instance/{instanceUuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GenericJobServerModel>> jobsInInstanceV1(
        @Parameter(name = "instanceUuid", description = "WDS instance id; by convention equal to workspace id", required = true, in = ParameterIn.PATH) @PathVariable("instanceUuid") UUID instanceUuid,
        @Parameter(name = "statuses", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "statuses", required = false) List<String> statuses
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
