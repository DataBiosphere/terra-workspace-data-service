# This file contains only the v1 WDS APIs.
# Our server-stub generator can target this file and this file only, to avoid generating
# v0.2 stubs we aren't using.externalDocs:
#
# The APIs and models in this file **must** also be included, via $ref, in openapi-docs.yaml
# to present both the v0.2 and v1 APIs to the swagger-ui.

openapi: 3.0.3

info:
  title: Workspace Data Service
  version: v1

security:
  - bearerAuth: [ ]

tags:
  # Tags should be listed in the order they should appear in the UI
  - name: Import
    description: Import APIs
  - name: Job
    description: Job APIs
  - name: Collection
    description: Collection APIs
  - name: Capabilities
    description: Describes the features of WDS

paths:
  ##############################
  # Import APIs
  ##############################
  /{instanceUuid}/import/v1:
    post:
      summary: Import from a file
      description: Imports records from the specified URL.
      operationId: importV1
      tags:
        - Import
      parameters:
        - $ref: '#/components/parameters/instanceUuidPathParam'
      requestBody:
        description: A request to import records from a file
        required: true
        content:
          application/json:
            schema:
              type: object
              title: ImportRequest
              required:
                - type
                - url
              properties:
                type:
                  type: string
                  enum: [ PFB, RAWLSJSON, TDRMANIFEST ]
                  description: format of file to import
                url:
                  type: string
                  format: uri
                  description: url from which to import
                options:
                  type: object
                  additionalProperties: true
                  description: key-value pairs to configure this import. Options vary based on the import file type.
      responses:
        202:
          description: Import accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericJob'

  ##############################
  # Job APIs
  ##############################
  /job/v1/{jobId}:
    get:
      summary: Get status of a long-running job.
      operationId: jobStatusV1
      tags:
        - Job
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Job completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericJob'
        202:
          description: Job still running.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericJob'
  /job/v1/instance/{instanceUuid}:
    get:
      summary: Get all jobs with a certain status under a particular instance.
      operationId: jobsInInstanceV1
      tags:
        - Job
      parameters:
        - $ref: '#/components/parameters/instanceUuidPathParam'
        - name: statuses
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [ CREATED, QUEUED, RUNNING, SUCCEEDED, ERROR, CANCELLED, UNKNOWN ]
      responses:
        200:
          description: A list of jobs with specified status for Instance Id.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GenericJob'

  ##############################
  # Collection APIs
  ##############################
  /collections/v1/{workspaceId}:
    get:
      summary: List all collections in this workspace.
      operationId: listCollectionsV1
      tags:
        - Collection
      parameters:
        - $ref: '#/components/parameters/workspaceIdPathParam'
      responses:
        200:
          description: List of collections in this workspace.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
    post:
      summary: Create a collection in this workspace.
      description: |
        If collection id is specified in the request body, it will be ignored; ids are
        auto-generated.
      operationId: createCollectionV1
      tags:
        - Collection
      parameters:
        - $ref: '#/components/parameters/workspaceIdPathParam'
      requestBody:
        description: The collection to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionRequest'
      responses:
        201:
          description: The collection just created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
  /collections/v1/{workspaceId}/{collectionId}:
    get:
      summary: Retrieve a single collection.
      operationId: getCollectionV1
      tags:
        - Collection
      parameters:
        - $ref: '#/components/parameters/workspaceIdPathParam'
        - $ref: '#/components/parameters/collectionIdPathParam'
      responses:
        200:
          description: The collection object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
    put:
      summary: Update the specified collection.
      description: |
        Collection id is optional in the request body. If specified, it must match the collection id
        specified in the url.
      operationId: updateCollectionV1
      tags:
        - Collection
      parameters:
        - $ref: '#/components/parameters/workspaceIdPathParam'
        - $ref: '#/components/parameters/collectionIdPathParam'
      requestBody:
        description: The collection to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      responses:
        200:
          description: The collection just updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
    delete:
      summary: Delete the specified collection.
      operationId: deleteCollectionV1
      tags:
        - Collection
      parameters:
        - $ref: '#/components/parameters/workspaceIdPathParam'
        - $ref: '#/components/parameters/collectionIdPathParam'
      responses:
        204:
          description: Collection has been deleted.

  ##############################
  # Capabilities APIs
  ##############################
  /capabilities/v1:
    get:
      summary: Describes the capabilities of this WDS version.
      operationId: capabilities
      tags:
        - Capabilities
      security: [ ]
      responses:
        200:
          description: key-value pairs describing capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capabilities'

components:
  # within each group, components should be listed alphabetically.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  parameters:
    collectionIdPathParam:
      name: collectionId
      in: path
      description: Collection id
      required: true
      schema:
        type: string
        format: uuid
    # instanceUuidPathParam is very close to duplicating instanceIdPathParam from v0.2,
    # but this one specifies format: uuid, which creates Java UUID objects in generated
    # code instead of a String.
    instanceUuidPathParam:
      name: instanceUuid
      in: path
      description: WDS instance id; by convention equal to workspace id
      required: true
      schema:
        type: string
        format: uuid
    workspaceIdPathParam:
      name: workspaceId
      in: path
      description: Workspace id
      required: true
      schema:
        type: string
        format: uuid

  schemas:
    Capabilities:
      type: object
      properties:
        capabilities:
          type: boolean
      additionalProperties:
        type: boolean
    Collection:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          pattern: '[a-zA-Z0-9-_]{1,128}'
          description: Letters, numbers, dash and underscore only. Max 128 characters.
        description:
          type: string
      required:
        - name
        - description
      example:
        id: 00112233-4455-6677-8899-aabbccddeeff
        name: my-collection-name
        description: This is a human-readable description for the collection.
    CollectionRequest:
      type: object
      properties:
        name:
          type: string
          pattern: '[a-zA-Z0-9-_]{1,128}'
          description: Letters, numbers, dash and underscore only. Max 128 characters.
        description:
          type: string
      required:
        - name
        - description
      example:
        name: my-collection-name
        description: This is a human-readable description for the collection.
    GenericJob:
      x-all-of-name: GenericJob
      description: |
        Generic representation of a job, no opinion on inputs and result for the job.
        See individual APIs for more guidance on expected input and result payloads.
      allOf:
        - $ref: '#/components/schemas/JobV1'
        - type: object
          properties:
            input:
              type: object
              description: Input arguments for this job
            result:
              type: object
              description: Result of this job
    JobV1:
      type: object
      required:
        - jobId
        - jobType
        - status
        - created
        - updated
        - instanceId
      properties:
        jobId:
          type: string
          format: uuid
        jobType:
          type: string
          enum: [ DATA_IMPORT, UNKNOWN ]
        instanceId:
          type: string
          format: uuid
        status:
          type: string
          enum: [ CREATED, QUEUED, RUNNING, SUCCEEDED, ERROR, CANCELLED, UNKNOWN ]
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        errorMessage:
          type: string
