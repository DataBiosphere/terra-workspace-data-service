openapi: 3.0.3

info:
  title: Workspace Data Service
  version: v0.2
  description: |
    Workspace Data Service API

    This is the proposed API. Endpoints marked (pending) are not yet implemented.

    As of v0.2, all APIs are subject to change without notice.
  termsOfService: https://github.com/DataBiosphere/terra-workspace-data-service
  license:
    name: BSD
    url: http://opensource.org/licenses/BSD-3-Clause
servers:
  - url: ../
    description: Relative to the current swagger page
tags:
  - name: Records
    description: Record APIs
  - name: Instances
    description: Instance APIs
  - name: Schema
    description: Schema Manipulation APIs (coming soon)
paths:
  /{instanceid}/records/{v}/{type}/{id}:
    get:
      summary: Get record
      operationId: getSingleRecord
      description: Retrieves a single record by its type and id
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
      responses:
        200:
          $ref: '#/components/responses/RecordResponseBody'
        404:
          description: Record not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Create or replace record
      description: |
        Creates or replaces the record using the specified type and id.
        If the record already exists, its entire set of attributes will be overwritten by
        the attributes in the request body.
        
        TODO: the type and id are duplicated in the url and the body; change this? Silently ignore the type/id in the body?
        
        TODO: add a query parameter to allow/disallow overwriting existing records?
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/RecordRequestBody'
      responses:
        200:
          description: Record updated
          $ref: '#/components/responses/RecordResponseBody'
        201:
          description: Record created
          $ref: '#/components/responses/RecordResponseBody'
        400:
          description: Bad request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update record
      operationId: addOrUpdateAttributes
      description: |
        Updates the record of the specified type and id.
        Any attributes included in the request body will be created or overwritten.
        Attributes not included in the request body will be untouched in the database.
        No attributes will be deleted. To delete attributes, use the PUT api instead.

        TODO: the type and id are duplicated in the url and the body; change this? Silently ignore the type/id in the body?
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/RecordRequestBody'
      responses:
        200:
          $ref: '#/components/responses/RecordResponseBody'
        404:
          description: Record not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete record (pending)
      description: Deletes the record at the specified type and id.
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
      responses:
        204:
          description: Success
  /{instanceid}/types/{v}/{type}:
    patch:
      summary: Update record type (pending)
      description: |
        Update record type. All records of the old type will be updated to the new type.
        Returns the updated type definition.

        v0.2 supports renaming a type; future versions may support additional functionality.
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordTypeDefinition'
    delete:
      summary: Delete record type (pending)
      description: Delete record type. All records of this type will be deleted.
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
      responses:
        204:
          description: Success
  /{instanceid}/types/{type}/attributes/{v}/{attribute}:
    patch:
      summary: Update attribute (pending)
      description: |
        Update attribute. All records containing the old attribute will now have the new attribute instead.
        Returns the updated attribute definition.

        v0.2 supports renaming an attribute within the specified type; future versions may support additional functionality.
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/attributePathParam'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordTypeDefinition'
    delete:
      summary: Delete attribute (pending)
      description: |
        Delete attribute. This deletes all values for this attribute within the specified type.
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/attributePathParam'
      responses:
        204:
          description: Success
  /{instanceid}/search/{v}:
    get:
      summary: Query records (pending)
      description: |
        Paginated list of records matching the criteria supplied in url query parameters.
        This API supports a basic subset of search and filtering operations. For full functionality,
        use the POST api instead.

        TODO: Eliminate this API in favor of POST?
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/searchLimitQueryParam'
        - $ref: '#/components/parameters/searchOffsetQueryParam'
        - $ref: '#/components/parameters/searchSortQueryParam'
        - $ref: '#/components/parameters/searchTermsQueryParam'
        - $ref: '#/components/parameters/searchOperatorQueryParam'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordQueryResponse'
    post:
      summary: Query records (pending)
      description: Paginated list of records matching the criteria supplied in the request body
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
      requestBody:
        description: The search to perform
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                offset:
                  $ref: '#/components/schemas/SearchOffset'
                limit:
                  $ref: '#/components/schemas/SearchLimit'
                sort:
                  $ref: '#/components/schemas/SearchSort'
                query:
                  $ref: '#/components/schemas/RequestBodySearch'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordQueryResponse'
  /{instanceid}/batch/{v}:
    post:
      summary: Batch write records (pending)
      description: Perform a batch of create / delete / update / replace operations on multiple records
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
      requestBody:
        $ref: '#/components/requestBodies/BatchRequestBody'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
  /{instanceid}/{v}/:
    post:
      summary: Create an instance (unstable)
      description: Create an instance with the given UUID. This API is liable to change.
      tags:
        - Instances
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
      responses:
        201:
          description: Success
        409:
          description: Conflict - schema already exists.
components:
  parameters:
    attributePathParam:
      name: attribute
      in: path
      description: Attribute name
      required: true
      schema:
        type: string
    recordIdPathParam:
      name: id
      in: path
      description: Record id
      required: true
      schema:
        type: string
    recordTypePathParam:
      name: type
      in: path
      description: Record type
      required: true
      schema:
        type: string
    instanceIdPathParam:
      name: instanceid
      in: path
      description: WDS instance id; by convention equal to workspace id
      required: true
      schema:
        type: string
    searchLimitQueryParam:
      name: limit
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/SearchLimit'
    searchOffsetQueryParam:
      name: offset
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/SearchOffset'
    searchOperatorQueryParam:
      name: operator
      in: query
      description: |
        Controls behavior when searching for multiple `terms`.
        If a `query` value is specified, `terms` and `operator` will be ignored.
      required: false
      schema:
        $ref: '#/components/schemas/SearchOperator'
    searchSortQueryParam:
      name: sort
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/SearchSort'
      examples:
        single attribute:
          description: Sort by a single attribute ascending
          value: name
        directional:
          description: Sort by a single attribute and specify sort direction
          value: name desc
        multiple attributes:
          description: Specify multiple attributes on which to sort
          value: name,size desc,color asc
    searchTermsQueryParam:
      name: terms
      in: query
      description: |
        Search terms used to filter query results.
        If a `query` value is specified, `terms` and `operator` will be ignored.
        Separate multiple terms by a space (%20 url-encoded)
      required: false
      schema:
        type: string
    versionPathParam:
      name: v
      in: path
      description: API version
      required: true
      schema:
        type: string
        default: v0.2
  responses:
    RecordResponseBody:
      description: A record
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RecordResponse'
  requestBodies:
    RecordRequestBody:
      description: An record to upload
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RecordRequest'
    BatchRequestBody:
      description: A list of batch operations to perform on records
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BatchOperation'
  schemas:
    BatchOperation:
      type: object
      required:
        - operation
        - entity
      properties:
        operation:
          type: string
          enum: [create, update, replace, delete]
        entity:
          $ref: '#/components/schemas/RecordRequest'
    BatchResponse:
      type: object
      required:
        - status
        - failures
      properties:
        status:
          type: string
          enum: [Success, Failure]
        failures:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/RecordId'
                description: Record id
              type:
                $ref: '#/components/schemas/RecordType'
                description: Record type
              message:
                type: string
    RecordRequest:
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
          description: Record id
        type:
          $ref: '#/components/schemas/RecordType'
          description: Record type
        attributes:
          $ref: '#/components/schemas/RecordAttributes'
          description: KVPs of record attributes
    RecordResponse:
      required:
        - id
        - type
        - metadata
        - attributes
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
          description: Record id
        type:
          $ref: '#/components/schemas/RecordType'
          description: Record type
        attributes:
          $ref: '#/components/schemas/RecordAttributes'
          description: KVPs of record attributes
        metadata:
          $ref: '#/components/schemas/RecordMetadata'
          description: Provenance and other record metadata. May not be present in v0.2.
    RecordAttributes:
      type: object
      additionalProperties: true
    RecordAttributeDefinition:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: Attribute name
    RecordId:
      type: string
    RecordMetadata:
      type: object
    RecordQueryResponse:
      type: object
    RecordType:
      type: string
    RecordTypeDefinition:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: Record type name
    ErrorResponse:
      required:
        - status
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code
        error:
          type: string
          description: error
        trace:
          type: array
          description: stack trace
          items:
            $ref: '#/components/schemas/StackTraceElement'
        message:
          type: string
          description: error message
        path:
          type: string
          description: requested record path
      description: ""
    RequestBodySearch:
      required:
        - terms
      type: object
      description: |
        v0.2 only supports `terms` and `operator`. Future versions may support additional functionality.
      properties:
        terms:
          $ref: '#/components/schemas/SearchTerms'
        operator:
          $ref: '#/components/schemas/SearchOperator'
    SearchLimit:
      type: integer
      default: 10
      minimum: 0
      maximum: 1000
      description: Pagination limit
    SearchOffset:
      type: integer
      default: 0
      minimum: 0
      description: Pagination offset
    SearchOperator:
      type: string
      enum: [and, or]
      description: Search behavior for multiple filter terms
    SearchSort:
      type: string
      description: |
        Sort specification for search results.

        Accepts `attribute` and `direction` separated by a single space (%20 url-encoded).
        `direction` can be "asc" or "desc". `direction` is optional and defaults to "asc".
        `attribute` and `direction` must be separated by a single space.

        Concatenate multiple sort specifications with commas.
      example: name,size desc,color asc
    SearchTerms:
      type: string
      description: Space-delimited list of terms on which to search
    StackTraceElement:
      required:
        - className
        - fileName
        - lineNumber
        - methodName
      type: object
      properties:
        className:
          type: string
          description: class name
        methodName:
          type: string
          description: method name
        fileName:
          type: string
          description: source file name
        lineNumber:
          type: integer
          description: line number
      description: ""
