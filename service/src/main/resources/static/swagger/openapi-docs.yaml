openapi: 3.0.3

info:
  title: Workspace Data Service
  version: v0.2
  description: |
    This page lists current APIs.

    All v0.2 APIs are subject to change without notice.

    Changelog at [https://github.com/DataBiosphere/terra-workspace-data-service/releases](https://github.com/DataBiosphere/terra-workspace-data-service/releases)
  termsOfService: https://github.com/DataBiosphere/terra-workspace-data-service
  license:
    name: BSD
    url: https://opensource.org/licenses/BSD-3-Clause

servers:
  - url: /

security:
  - bearerAuth: [ ]

tags:
  # Tags should be listed in the order they should appear in the UI
  - name: Cloning
    description: Cloning APIs including Backup and Restore
  - name: Records
    description: Record APIs
  - name: Import
    description: Import APIs
  - name: Job
    description: Job APIs
  - name: Collection
    description: Collection APIs
  - name: Instances
    description: Instance APIs
  - name: Schema
    description: Schema Manipulation APIs (coming soon)
  - name: General WDS Information
    description: Information regarding versioning, health, info, etc. for WDS
  - name: Capabilities
    description: Describes the features of WDS

paths:
  # Paths should be grouped by their tag, following the order of tags listed above.
  # Within each tag group, paths should be listed alphabetically.

  ##############################
  # Cloning APIs
  ##############################
  /backup/{v}:
    post:
      tags:
        - Cloning
      parameters:
        - $ref: '#/components/parameters/versionPathParam'
      requestBody:
        $ref: '#/components/requestBodies/BackupRestoreRequestBody'
      summary: Create a backup of all WDS data
      operationId: createBackup
      responses:
        200:
          description: Successfully initiated the backup process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupJob'
  /backup/{v}/{trackingId}:
    get:
      tags:
        - Cloning
      parameters:
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/trackingIdPathParam'
      summary: Check status of a WDS data backup
      operationId: getBackupStatus
      responses:
        200:
          description: Returns backup status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupJob'
  /clone/{v}:
    get:
      tags:
        - Cloning
      parameters:
        - $ref: '#/components/parameters/versionPathParam'
      summary: Check status of a WDS data clone
      operationId: getCloneStatus
      responses:
        200:
          description: Returns clone status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneJob'

  ##############################
  # Records APIs
  ##############################
  /{instanceid}/batch/{v}/{type}:
    post:
      summary: Batch write records
      description: Perform a batch of upsert / delete operations on multiple records
      operationId: batchWriteRecords
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordTypePrimaryKey'
      requestBody:
        $ref: '#/components/requestBodies/BatchRequestBody'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
  /{instanceid}/records/{v}/{type}/{id}:
    get:
      summary: Get record
      operationId: getRecord
      description: Retrieves a single record by its type and id
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
      responses:
        200:
          $ref: '#/components/responses/RecordResponseBody'
        404:
          description: Record not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Create or replace record
      description: |
        Creates or replaces the record using the specified type and id.
        If the record already exists, its entire set of attributes will be overwritten by
        the attributes in the request body.
        TODO: add a query parameter to allow/disallow overwriting existing records?
      operationId: createOrReplaceRecord
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
        - $ref: '#/components/parameters/recordTypePrimaryKey'
      requestBody:
        $ref: '#/components/requestBodies/RecordRequestBody'
      responses:
        200:
          $ref: '#/components/responses/RecordResponseBody'
        201:
          $ref: '#/components/responses/RecordResponseBody'
        400:
          description: Bad request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update record
      operationId: updateRecord
      description: |
        Updates the record of the specified type and id.
        Any attributes included in the request body will be created or overwritten.
        Attributes not included in the request body will be untouched in the database.
        No attributes will be deleted. To delete attributes, use the PUT api instead.
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/RecordRequestBody'
      responses:
        200:
          $ref: '#/components/responses/RecordResponseBody'
        404:
          description: Record not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        400:
          description: Bad request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete record
      description: Deletes the record at the specified type and id.
      operationId: deleteRecord
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
      responses:
        204:
          description: Success
        404:
          description: Record not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        400:
          description: Bad request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /{instanceid}/search/{v}/{type}:
    post:
      summary: Query records
      description: Paginated list of records matching the criteria supplied in the request body
      operationId: queryRecords
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
      requestBody:
        $ref: '#/components/requestBodies/SearchRequestBody'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordQueryResponse'
        404:
          description: Record type not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /{instanceid}/tsv/{v}/{type}:
    get:
      summary: Retrieve all records in record type as tsv.
      operationId: getRecordsAsTsv
      description: Streams all records in a record type to a tsv format.
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
      responses:
        200:
          description: Records in tsv format
          content:
            text/tab-separated-values:
              schema:
                type: string
                format: binary
        404:
          description: Instance or Record type not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Import records to a record type from a tsv file
      description: Upload a tsv to modify or create records in a record type.  This operation will insert or update records.
      tags:
        - Records
      operationId: uploadTSV
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordTypePrimaryKey'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - records
              properties:
                records:
                  type: string
                  description: A valid TSV import file
                  format: binary
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TsvUploadResponse'
        400:
          description: Bad Request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Instance not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  ##############################
  # Import APIs
  ##############################
  /{instanceUuid}/import/v1:
    # OpenApi requires "/" to be replaced with "~1" in the path being referenced
    $ref: 'apis-v1.yaml#/paths/~1{instanceUuid}~1import~1v1'

  ##############################
  # Job APIs
  ##############################
  /job/v1/{jobId}:
    $ref: 'apis-v1.yaml#/paths/~1job~1v1~1{jobId}'
  /job/v1/instance/{instanceUuid}:
    $ref: 'apis-v1.yaml#/paths/~1job~1v1~1instance~1{instanceUuid}'

  ##############################
  # Collection APIs
  ##############################
  /collections/v1/{workspaceId}:
    $ref: 'apis-v1.yaml#/paths/~1collections~1v1~1{workspaceId}'
  /collections/v1/{workspaceId}/{collectionId}:
    $ref: 'apis-v1.yaml#/paths/~1collections~1v1~1{workspaceId}~1{collectionId}'

  ##############################
  # Instances APIs
  ##############################
  /instances/{v}:
    get:
      summary: This API will be deleted on or after August 25, 2024.
      description: Use GET /collections/v1/{workspaceId} instead.
      operationId: listWDSInstances
      deprecated: true
      tags:
        - Instances
      parameters:
        - $ref: '#/components/parameters/versionPathParam'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
  /instances/{v}/{instanceid}:
    post:
      summary: This API will be deleted on or after August 25, 2024.
      description: Use POST /collections/v1/{workspaceId} instead.
      operationId: createWDSInstance
      deprecated: true
      tags:
        - Instances
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
      responses:
        201:
          description: Success
        409:
          description: Conflict - schema already exists.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: This API will be deleted on or after August 25, 2024.
      description: Use DELETE /collections/v1/{workspaceId}/{collectionId} instead.
      operationId: deleteWDSInstance
      deprecated: true
      tags:
        - Instances
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
      responses:
        200:
          description: Success
        404:
          description: Not Found - instance does not exist.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  ##############################
  # Schema APIs
  ##############################
  /{instanceid}/types/{v}:
    get:
      summary: Describe all record types
      description: |
        Returns the schema definition for all types in this instance.
      operationId: describeAllRecordTypes
      tags:
        - Schema
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecordTypeSchema'
        404:
          description: Instance not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /{instanceid}/types/{v}/{type}:
    get:
      summary: Describe record type
      description: |
        Returns the schema definition for this type.
      operationId: describeRecordType
      tags:
        - Schema
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordTypeSchema'
        404:
          description: Record type not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete record type
      description: Delete record type. All records of this type will be deleted.
      operationId: deleteRecordType
      tags:
        - Schema
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
      responses:
        204:
          description: Success
        409:
          description: at least one of the records to be deleted is a relation target
  /{instanceid}/types/{v}/{type}/{attribute}:
    patch:
      summary: Update an attribute
      description: Update an attribute. All records of this type will be updated.
      operationId: updateAttribute
      tags:
        - Schema
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/attributePathParam'
      requestBody:
        $ref: '#/components/requestBodies/AttributeSchemaUpdateRequestBody'
      responses:
        204:
          description: Success
        400:
          description: Update is invalid
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Attribute does not exist
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Update cannot be applied to current data in the record type
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete attribute from record type
      description: Delete attribute from record type. This attribute will be removed from all records of this type.
      operationId: deleteAttribute
      tags:
        - Schema
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/attributePathParam'
      responses:
        204:
          description: Success
        400:
          description: Attribute is the ID for record type
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Attribute does not exist
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  ##############################
  # General WDS Information APIs
  ##############################
  /status:
    get:
      summary: Gets health status for WDS -- generated via Spring Boot Actuator (see https://docs.spring.io/spring-boot/docs/current/actuator-api/htmlsingle/#health for details)
      operationId: statusGet
      tags:
        - General WDS Information
      security: [ ]
      responses:
        200:
          $ref: '#/components/responses/StatusResponseBody'
  /version:
    get:
      summary: Gets related git and build version info for WDS -- generated via Spring Boot Actuator (see https://docs.spring.io/spring-boot/docs/current/actuator-api/htmlsingle/#info for details)
      operationId: versionGet
      tags:
        - General WDS Information
      security: [ ]
      responses:
        200:
          $ref: '#/components/responses/VersionResponseBody'

  ##############################
  # Capabilities APIs
  ##############################
  /capabilities/v1:
    # OpenApi requires "/" to be replaced with "~1" in the path being referenced
    $ref: 'apis-v1.yaml#/paths/~1capabilities~1v1'

components:
  # within each group, components should be listed alphabetically.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  parameters:
    attributePathParam:
      name: attribute
      in: path
      description: Attribute name
      required: true
      schema:
        type: string
    instanceIdPathParam:
      name: instanceid
      in: path
      description: WDS instance id; by convention equal to workspace id
      required: true
      schema:
        type: string
    instanceUuidPathParam:
      name: instanceUuid
      in: path
      description: WDS instance id; by convention equal to workspace id
      required: true
      schema:
        type: string
        format: uuid
    recordIdPathParam:
      name: id
      in: path
      description: Record id
      required: true
      schema:
        type: string
    recordTypePathParam:
      name: type
      in: path
      description: Record type
      required: true
      schema:
        type: string
    recordTypePrimaryKey:
      name: primaryKey
      in: query
      description: the column to uniquely identify a record
      required: false
      schema:
        type: string
    trackingIdPathParam:
      name: trackingId
      in: path
      description: Backup tracking id
      required: true
      schema:
        type: string
        format: uuid
    versionPathParam:
      name: v
      in: path
      description: API version
      required: true
      schema:
        type: string
        default: v0.2

  responses:
    RecordResponseBody:
      description: A record
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RecordResponse'
    StatusResponseBody:
      description: Status Info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusResponse'
    VersionResponseBody:
      description: Version Info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VersionResponse'
  requestBodies:
    AttributeSchemaUpdateRequestBody:
      description: A request to update an attribute
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AttributeSchemaUpdate'
    BackupRestoreRequestBody:
      description: A backup request
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BackupRestoreRequest'
    BatchRequestBody:
      description: A list of batch operations to perform on records
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BatchOperation'
    RecordRequestBody:
      description: A record's attributes to upload
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RecordRequest'
    SearchRequestBody:
      description: A paginated search request
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchRequest'

  schemas:
    app:
      type: object
      properties:
        chart-version:
          type: string
        image:
          type: string
    AttributeDataType:
      type: string
      enum: [ BOOLEAN, NUMBER, DATE, DATE_TIME, STRING, JSON, RELATION, FILE, ARRAY_OF_BOOLEAN, ARRAY_OF_STRING, ARRAY_OF_NUMBER, ARRAY_OF_DATE, ARRAY_OF_DATE_TIME, ARRAY_OF_RELATION, ARRAY_OF_FILE ]
      description: |
        Datatype of attribute. The enum of data types is in flux and will change. Please
        comment at https://docs.google.com/document/d/1d352ZoN5kEYWPjy0NqqWGxdf7HEu5VEdrLmiAv7dMmQ/edit#heading=h.naxag0augkgf.
    AttributeSchema:
      type: object
      required:
        - name
        - datatype
      properties:
        name:
          type: string
          description: name of this attribute.
        datatype:
          $ref: '#/components/schemas/AttributeDataType'
        relatesTo:
          type: string
          description: Name of type to which this attribute relates. Only present if this is a relation attribute.
    AttributeSchemaUpdate:
      type: object
      properties:
        name:
          type: string
          description: new name of this attribute.
        datatype:
          $ref: '#/components/schemas/AttributeDataType'
    BackupJob:
      x-all-of-name: BackupJob
      allOf:
        - $ref: '#/components/schemas/Job'
        - type: object
          properties:
            input:
              type: object
              description: Input arguments; expected to be empty.
            result:
              $ref: '#/components/schemas/BackupResponse'
    BackupResponse:
      type: object
      properties:
        filename:
          type: string
          description: backup location
        requester:
          type: string
          format: uuid
          description: workspace which initiated the backup
        description:
          type: string
          description: description of this backup
    BackupRestoreRequest:
      type: object
      properties:
        requestingWorkspaceId:
          type: string
          format: uuid
          description: workspace requesting the backup. Optional; defaults to the workspace in which this WDS is running.
        description:
          type: string
          description: User-friendly description to associate with this backup. Optional.
    BatchOperation:
      type: object
      required:
        - operation
        - record
      properties:
        operation:
          type: string
          enum: [ upsert, delete ]
        record:
          $ref: '#/components/schemas/BatchRecordRequest'
    BatchRecordRequest:
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        type:
          $ref: '#/components/schemas/RecordType'
        attributes:
          $ref: '#/components/schemas/RecordAttributes'
    BatchResponse:
      type: object
      required:
        - message
        - recordsModified
      properties:
        message:
          type: string
        recordsModified:
          type: integer
    build:
      type: object
      properties:
        artifact:
          type: string
        name:
          type: string
        time:
          type: string
          format: date-time
        version:
          type: string
        group:
          type: string
    CloneJob:
      x-all-of-name: CloneJob
      allOf:
        - $ref: '#/components/schemas/Job'
        - type: object
          properties:
            input:
              type: object
              description: Input arguments; expected to be empty.
            result:
              $ref: '#/components/schemas/CloneResponse'
    CloneResponse:
      type: object
      properties:
        sourceworkspaceid:
          type: string
          format: uuid
          description: workspace which initiated the clone
        clonestatus:
          type: string
          description: description of this clone status
    commit:
      type: object
      properties:
        id:
          type: string
        time:
          type: string
          format: date-time
    ErrorResponse:
      required:
        - status
        - path
        - message
        - error
        - timestamp
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code
        error:
          type: string
          description: error
        message:
          type: string
          description: error message
        path:
          type: string
          description: requested record path
        timestamp:
          type: string
          description: time of error
      description: ""
    FilterColumn:
      type: object
      required:
        - column
        - find
      properties:
        column:
          type: string
        find:
          type: string
      additionalProperties: false
    git:
      type: object
      properties:
        branch:
          type: string
        commit:
          $ref: '#/components/schemas/commit'
    Job:
      type: object
      required:
        - jobId
        - status
        - created
        - updated
      properties:
        jobId:
          type: string
        jobType:
          type: string
        status:
          type: string
          enum: [ QUEUED, RUNNING, SUCCEEDED, ERROR, CANCELLED, UNKNOWN ]
        created:
          type: string
        updated:
          type: string
        errorMessage:
          type: string
    RecordAttributes:
      type: object
      additionalProperties: true
      description: KVPs of record attributes, valid characters for attribute names are limited to letters, numbers, spaces, dashes, and underscores.
      example: |
        {
          "stringAttr": "string",
          "numericAttr": 123,
          "booleanAttr": true,
          "relationAttr": "terra-wds:/target-type/target-id",
          "fileAttr": "https://account_name.blob.core.windows.net/container-1/blob1",
          "arrayString": ["green", "red"],
          "arrayBoolean": [true, false],
          "arrayNumber": [12821.112, 0.12121211, 11],
          "arrayDate": ["2022-11-03"],
          "arrayDateTime": ["2022-11-03T04:36:20"],
          "arrayRelation": ["terra-wds:/target-type/target-id-1", "terra-wds:/target-type/target-id-2"],
          "arrayFile": ["drs://drs.example.org/file_id_1", "https://account_name.blob.core.windows.net/container-2/blob2"]
        }

    RecordId:
      type: string
      description: Record id
    RecordQueryResponse:
      required:
        - searchRequest
        - records
        - totalRecords
      type: object
      properties:
        searchRequest:
          $ref: '#/components/schemas/SearchRequest'
        totalRecords:
          type: integer
          description: number of records in the record type
        records:
          type: array
          items:
            $ref: '#/components/schemas/RecordResponse'
          description: list of records found
    RecordRequest:
      type: object
      required:
        - attributes
      properties:
        attributes:
          $ref: '#/components/schemas/RecordAttributes'
    RecordResponse:
      required:
        - id
        - type
        - attributes
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        type:
          $ref: '#/components/schemas/RecordType'
        attributes:
          $ref: '#/components/schemas/RecordAttributes'
    RecordType:
      type: string
      description: Record type
    RecordTypeSchema:
      required:
        - name
        - attributes
        - count
        - primaryKey
      type: object
      properties:
        name:
          type: string
          description: Record type name, valid characters for record type names are limited to letters, numbers, spaces, dashes, and underscores.
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeSchema'
        count:
          type: integer
          description: Number of records of this type
        primaryKey:
          type: string
          description: Attribute name that contains the value to uniquely identify each record, defined as a primary key column in the underlying table.
    SearchFilter:
      type: object
      properties:
        ids:
          description: Record ids by which to filter the query
          type: array
          items:
            type: string
        filters:
          type: array
          items:
            $ref: '#/components/schemas/FilterColumn'
    SearchLimit:
      type: integer
      default: 10
      minimum: 0
      maximum: 1000
      description: Pagination limit
    SearchOffset:
      type: integer
      default: 0
      minimum: 0
      description: Pagination offset
    SearchRequest:
      type: object
      properties:
        offset:
          $ref: '#/components/schemas/SearchOffset'
        limit:
          $ref: '#/components/schemas/SearchLimit'
        sort:
          $ref: '#/components/schemas/SearchSortDirection'
        sortAttribute:
          type: string
        filter:
          $ref: '#/components/schemas/SearchFilter'
    SearchSortDirection:
      type: string
      enum: [ ASC, DESC ]
      default: ASC
      description: |
        Sort direction (descending or ascending)
    StatusResponse:
      type: object
      properties:
        status:
          type: string
        components:
          type: object
    TsvUploadResponse:
      type: object
      required:
        - message
        - recordsModified
      properties:
        message:
          type: string
        recordsModified:
          type: integer
    VersionResponse:
      type: object
      properties:
        app:
          $ref: '#/components/schemas/app'
        git:
          $ref: '#/components/schemas/git'
        build:
          $ref: '#/components/schemas/build'

