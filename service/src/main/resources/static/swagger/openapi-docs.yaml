openapi: 3.0.3

info:
  title: Workspace Data Service
  version: v0.2
  description: |
    This page lists current APIs.

    As of v0.2, all APIs are subject to change without notice.
  termsOfService: https://github.com/DataBiosphere/terra-workspace-data-service
  license:
    name: BSD
    url: https://opensource.org/licenses/BSD-3-Clause
servers:
  - url: ../
    description: Relative to the current swagger page
tags:
  - name: Records
    description: Record APIs
  - name: Instances
    description: Instance APIs
  - name: Schema
    description: Schema Manipulation APIs (coming soon)
  - name: General WDS Information
    description: Information regarding versioning, health, info, etc. for WDS
paths:
  /status:
    get:
      summary: Gets health status for WDS -- generated via Spring Boot Actuator (see https://docs.spring.io/spring-boot/docs/current/actuator-api/htmlsingle/#health for details)
      operationId: statusGet
      tags:
        - General WDS Information
      responses:
        200:
          $ref: '#/components/responses/StatusResponseBody'
  /version:
    get:
      summary: Gets related git and build version info for WDS -- generated via Spring Boot Actuator (see https://docs.spring.io/spring-boot/docs/current/actuator-api/htmlsingle/#info for details)
      operationId: versionGet
      tags:
        - General WDS Information
      responses:
        200:
          $ref: '#/components/responses/VersionResponseBody'
  /{instanceid}/records/{v}/{type}/{id}:
    get:
      summary: Get record
      operationId: getRecord
      description: Retrieves a single record by its type and id
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
      responses:
        200:
          $ref: '#/components/responses/RecordResponseBody'
        404:
          description: Record not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Create or replace record
      description: |
        Creates or replaces the record using the specified type and id.
        If the record already exists, its entire set of attributes will be overwritten by
        the attributes in the request body.
        TODO: add a query parameter to allow/disallow overwriting existing records?
      operationId: createOrReplaceRecord
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
        - $ref: '#/components/parameters/recordTypePrimaryKey'
      requestBody:
        $ref: '#/components/requestBodies/RecordRequestBody'
      responses:
        200:
          $ref: '#/components/responses/RecordResponseBody'
        201:
          $ref: '#/components/responses/RecordResponseBody'
        400:
          description: Bad request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update record
      operationId: updateRecord
      description: |
        Updates the record of the specified type and id.
        Any attributes included in the request body will be created or overwritten.
        Attributes not included in the request body will be untouched in the database.
        No attributes will be deleted. To delete attributes, use the PUT api instead.
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/RecordRequestBody'
      responses:
        200:
          $ref: '#/components/responses/RecordResponseBody'
        404:
          description: Record not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        400:
          description: Bad request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete record
      description: Deletes the record at the specified type and id.
      operationId: deleteRecord
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordIdPathParam'
      responses:
        204:
          description: Success
        404:
          description: Record not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        400:
          description: Bad request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /{instanceid}/search/{v}/{type}:
    post:
      summary: Query records
      description: Paginated list of records matching the criteria supplied in the request body
      operationId: queryRecords
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
      requestBody:
        $ref: '#/components/requestBodies/SearchRequestBody'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordQueryResponse'
        404:
          description: Record type not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /{instanceid}/tsv/{v}/{type}:
    get:
      summary: Retrieve all records in record type as tsv.
      operationId: getRecordsAsTsv
      description: Streams all records in a record type to a tsv format.
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
      responses:
        200:
          description: Records in tsv format
          content:
            text/tab-separated-values:
              schema:
                type: string
                format: binary
        404:
          description: Instance or Record type not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Import records to a record type from a tsv file
      description: Upload a tsv to modify or create records in a record type.  This operation will insert or update records.
      tags:
        - Records
      operationId: uploadTSV
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordTypePrimaryKey'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - records
              properties:
                records:
                  type: string
                  description: A valid TSV import file
                  format: binary
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TsvUploadResponse'
        400:
          description: Bad Request
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Instance not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /{instanceid}/batch/{v}/{type}:
    post:
      summary: Batch write records
      description: Perform a batch of upsert / delete operations on multiple records
      operationId: batchWriteRecords
      tags:
        - Records
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
        - $ref: '#/components/parameters/recordTypePrimaryKey'
      requestBody:
        $ref: '#/components/requestBodies/BatchRequestBody'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
  /instances/{v}:
    get:
      summary: List instances
      description: List all instances in this server.
      operationId: listWDSInstances
      tags:
        - Instances
      parameters:
        - $ref: '#/components/parameters/versionPathParam'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid

  /instances/{v}/{instanceid}:
    post:
      summary: Create an instance
      description: Create an instance with the given UUID.
      operationId: createWDSInstance
      security:
        - bearerAuth: [ ]
      tags:
        - Instances
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/workspaceIdQueryParam'
      responses:
        201:
          description: Success
        409:
          description: Conflict - schema already exists.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete an instance
      description: |
        Delete the instance with the given UUID. This API is liable to change.

        THIS WILL DELETE ALL DATA WITHIN THE INSTANCE. Be certain this is what you want to do.
      operationId: deleteWDSInstance
      security:
        - bearerAuth: [ ]
      tags:
        - Instances
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
      responses:
        200:
          description: Success
        404:
          description: Not Found - instance does not exist.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /{instanceid}/types/{v}/{type}:
    get:
      summary: Describe record type
      description: |
        Returns the schema definition for this type.
      operationId: describeRecordType
      tags:
        - Schema
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordTypeSchema'
        404:
          description: Record type not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete record type
      description: Delete record type. All records of this type will be deleted.
      operationId: deleteRecordType
      tags:
        - Schema
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
        - $ref: '#/components/parameters/recordTypePathParam'
      responses:
        204:
          description: Success
        409:
          description: at least one of the records to be deleted is a relation target
  /{instanceid}/types/{v}:
    get:
      summary: Describe all record types
      description: |
        Returns the schema definition for all types in this instance.
      operationId: describeAllRecordTypes
      tags:
        - Schema
      parameters:
        - $ref: '#/components/parameters/instanceIdPathParam'
        - $ref: '#/components/parameters/versionPathParam'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecordTypeSchema'
        404:
          description: Instance not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  parameters:
    attributePathParam:
      name: attribute
      in: path
      description: Attribute name
      required: true
      schema:
        type: string
    recordIdPathParam:
      name: id
      in: path
      description: Record id
      required: true
      schema:
        type: string
    recordTypePathParam:
      name: type
      in: path
      description: Record type
      required: true
      schema:
        type: string
    recordTypePrimaryKey:
      name: primaryKey
      in: query
      description: the column to uniquely identify a record
      required: false
      schema:
        type: string
    instanceIdPathParam:
      name: instanceid
      in: path
      description: WDS instance id; by convention equal to workspace id
      required: true
      schema:
        type: string
    versionPathParam:
      name: v
      in: path
      description: API version
      required: true
      schema:
        type: string
        default: v0.2
    workspaceIdQueryParam:
      name: workspaceid
      in: query
      description: Id of workspace containing a WDS instance. If omitted, assumed to be equal to the instance id.
      required: false
      schema:
        type: string
        format: uuid

  responses:
    RecordResponseBody:
      description: A record
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RecordResponse'
    VersionResponseBody:
      description: Version Info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VersionResponse'
    StatusResponseBody:
      description: Status Info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusResponse'
  requestBodies:
    SearchRequestBody:
      description: A paginated search request
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchRequest'
    RecordRequestBody:
      description: A record's attributes to upload
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RecordRequest'
    BatchRequestBody:
      description: A list of batch operations to perform on records
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BatchOperation'
  schemas:
    AttributeSchema:
      type: object
      required:
        - name
        - datatype
      properties:
        name:
          type: string
          description: name of this attribute.
        datatype:
          type: string
          enum: [BOOLEAN, NUMBER, DATE, DATE_TIME, STRING, JSON, RELATION, FILE, ARRAY_OF_BOOLEAN, ARRAY_OF_STRING, ARRAY_OF_NUMBER, ARRAY_OF_DATE, ARRAY_OF_DATE_TIME, ARRAY_OF_RELATION, ARRAY_OF_FILE]
          description: |
            Datatype of this attribute. The enum of datatypes is in flux and will change. Please
            comment at https://docs.google.com/document/d/1d352ZoN5kEYWPjy0NqqWGxdf7HEu5VEdrLmiAv7dMmQ/edit#heading=h.naxag0augkgf.
        relatesTo:
          type: string
          description: Name of type to which this attribute relates. Only present if this is a relation attribute.
    BatchOperation:
      type: object
      required:
        - operation
        - record
      properties:
        operation:
          type: string
          enum: [upsert, delete]
        record:
          $ref: '#/components/schemas/BatchRecordRequest'
    BatchRecordRequest:
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        type:
          $ref: '#/components/schemas/RecordType'
        attributes:
          $ref: '#/components/schemas/RecordAttributes'
    BatchResponse:
      type: object
      required:
        - message
        - recordsModified
      properties:
        message:
          type: string
        recordsModified:
          type: integer
    TsvUploadResponse:
      type: object
      required:
        - message
        - recordsModified
      properties:
        message:
          type: string
        recordsModified:
          type: integer

    SearchRequest:
      type: object
      properties:
        offset:
          $ref: '#/components/schemas/SearchOffset'
        limit:
          $ref: '#/components/schemas/SearchLimit'
        sort:
          $ref: '#/components/schemas/SearchSortDirection'
        sortAttribute:
          type: string
    RecordRequest:
      type: object
      required:
        - attributes
      properties:
        attributes:
          $ref: '#/components/schemas/RecordAttributes'
    RecordResponse:
      required:
        - id
        - type
        - attributes
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RecordId'
        type:
          $ref: '#/components/schemas/RecordType'
        attributes:
          $ref: '#/components/schemas/RecordAttributes'
    RecordAttributes:
      type: object
      additionalProperties: true
      description: KVPs of record attributes, valid characters for attribute names are limited to letters, numbers, spaces, dashes, and underscores.
      example: |
        {
          "stringAttr": "string",
          "numericAttr": 123,
          "booleanAttr": true,
          "relationAttr": "terra-wds:/target-type/target-id",
          "fileAttr": "https://account_name.blob.core.windows.net/container-1/blob1",
          "arrayString": ["green", "red"],
          "arrayBoolean": [true, false],
          "arrayNumber": [12821.112, 0.12121211, 11],
          "arrayDate": ["2022-11-03"],
          "arrayDateTime": ["2022-11-03T04:36:20"],
          "arrayRelation": ["terra-wds:/target-type/target-id-1", "terra-wds:/target-type/target-id-2"],
          "arrayFile": ["drs://drs.example.org/file_id_1", "https://account_name.blob.core.windows.net/container-2/blob2"]
        }
    RecordAttributeDefinition:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: Attribute name
    RecordId:
      type: string
      description: Record id
    RecordQueryResponse:
      required:
        - searchRequest
        - records
        - totalRecords
      type: object
      properties:
        searchRequest:
          $ref: '#/components/schemas/SearchRequest'
        totalRecords:
          type: integer
          description: number of records in the record type
        records:
          type: array
          items:
            $ref: '#/components/schemas/RecordResponse'
          description: list of records found
    RecordType:
      type: string
      description: Record type
    RecordTypeSchema:
      required:
        - name
        - attributes
        - count
        - primaryKey
      type: object
      properties:
        name:
          type: string
          description: Record type name, valid characters for record type names are limited to letters, numbers, spaces, dashes, and underscores.
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeSchema'
        count:
          type: integer
          description: Number of records of this type
        primaryKey:
          type: string
          description: Attribute name that contains the value to uniquely identify each record, defined as a primary key column in the underlying table.
    ErrorResponse:
      required:
        - status
        - path
        - message
        - error
        - timestamp
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code
        error:
          type: string
          description: error
        message:
          type: string
          description: error message
        path:
          type: string
          description: requested record path
        timestamp:
          type: string
          description: time of error
      description: ""
    RequestBodySearch:
      required:
        - terms
      type: object
      description: |
        v0.2 only supports `terms` and `operator`. Future versions may support additional functionality.
      properties:
        terms:
          $ref: '#/components/schemas/SearchTerms'
        operator:
          $ref: '#/components/schemas/SearchOperator'
    SearchLimit:
      type: integer
      default: 10
      minimum: 0
      maximum: 1000
      description: Pagination limit
    SearchOffset:
      type: integer
      default: 0
      minimum: 0
      description: Pagination offset
    SearchOperator:
      type: string
      enum: [and, or]
      description: Search behavior for multiple filter terms
    SearchSortDirection:
      type: string
      enum: [asc, desc]
      default: asc
      description: |
        Sort direction (descending or ascending)
    SearchTerms:
      type: string
      description: Space-delimited list of terms on which to search
    StackTraceElement:
      required:
        - className
        - fileName
        - lineNumber
        - methodName
      type: object
      properties:
        className:
          type: string
          description: class name
        methodName:
          type: string
          description: method name
        fileName:
          type: string
          description: source file name
        lineNumber:
          type: integer
          description: line number
      description: ""
    VersionResponse:
      type: object
      properties:
        git:
          $ref: '#/components/schemas/git'
        build:
          $ref: '#/components/schemas/build'
    StatusResponse:
      type: object
      properties:
        status:
          type: string
        components:
          $ref: '#/components/schemas/components'
        groups:
          type: string
    build:
      type: object
      properties:
        artifact:
          type: string
        name:
          type: string
        time:
          type: string
          format: date-time
        version:
          type: string
        group:
          type: string
    git:
      type: object
      properties:
          branch:
            type: string
          commit:
            $ref: '#/components/schemas/commit'
    commit:
      type: object
      properties:
        id:
          type: string
        time:
          type: string
          format: date-time
    components:
      type: object
      properties:
         db:
           $ref: '#/components/schemas/dbComponent'
         diskSpace:
           $ref: '#/components/schemas/component'
         ping:
           $ref: '#/components/schemas/component'
    component:
      type: object
      properties:
        status:
          type: string
        details:
          type: string
    dbComponent:
      type: object
      properties:
        status:
          type: string
        components:
          type: string
