plugins {
	id 'org.springframework.boot'
	id 'com.google.cloud.tools.jib'
	id 'org.hidetake.swagger.generator'
	id 'org.sonarqube'
	id 'com.gorylenko.gradle-git-properties'
	id 'jacoco'
	id "au.com.dius.pact" version "4.6.1"
	id 'jvm-test-suite'
}

springBoot {
	buildInfo()
}

repositories {
	maven { url 'https://broadinstitute.jfrog.io/artifactory/maven-central' }
	mavenCentral()
	maven { url 'https://broadinstitute.jfrog.io/artifactory/libs-snapshot' }
	maven { url 'https://broadinstitute.jfrog.io/artifactory/libs-release' }
}

jib {
	from {
		// see https://github.com/broadinstitute/dsp-appsec-blessed-images/tree/main/jre
		image = "us.gcr.io/broad-dsp-gcr-public/base/wds-debian-pg-dump:latest"
	}

	container {
		mainClass = 'org.databiosphere.workspacedataservice.WorkspaceDataServiceApplication'
		creationTime = "USE_CURRENT_TIMESTAMP"
	}
}

ext {
	jersey_version = "2.36"
}

dependencies {
	// Azure libraries
	implementation 'com.microsoft.azure:applicationinsights-runtime-attach:3.4.9'
	implementation 'com.azure:azure-storage-blob:12.18.0'
	implementation 'com.azure:azure-identity:1.9.1' // authentication in azure environment
	implementation 'com.azure:azure-identity-extensions:1.1.4' // postgres password plugin

	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.retry:spring-retry:1.3.4'
	implementation 'org.aspectj:aspectjweaver:1.8.9' // required by spring-retry, not used directly by WDS
	implementation 'org.apache.commons:commons-lang3'
	implementation 'com.google.guava:guava:32.1.1-jre'
	implementation 'org.postgresql:postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.webjars:webjars-locator-core:0.52'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.13.5'
	implementation 'io.sentry:sentry-logback:6.12.1'
	implementation 'org.liquibase:liquibase-core:4.21.1'
	implementation 'javax.cache:cache-api'
	implementation 'org.ehcache:ehcache:3.10.8'
	implementation 'org.hashids:hashids:1.0.3'
	implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'

	// Terra libraries
	implementation group: 'org.broadinstitute.dsde.workbench', name: 'sam-client_2.13', version: '0.1-08b6588'
	implementation group: 'org.broadinstitute.dsde.workbench', name: 'leonardo-client_2.11', version: '1.3.5-1be4da6-SNAP'
	implementation 'com.squareup.okhttp3:okhttp:4.10.0' // required by Sam client
	implementation "bio.terra:datarepo-client:1.476.0-SNAPSHOT"
	implementation "bio.terra:workspace-manager-client:0.254.717-SNAPSHOT"
	implementation project(path: ':client')

	// hk2 is required to use WSM client, but not correctly exposed by the client
	implementation "org.glassfish.jersey.inject:jersey-hk2:$jersey_version"
	implementation "org.glassfish.jersey.core:jersey-client:$jersey_version"
	implementation "org.glassfish.jersey.core:jersey-common:$jersey_version"

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	runtimeOnly 'org.webjars.npm:swagger-ui-dist:4.12.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
	testImplementation project(':client')
	testImplementation 'au.com.dius.pact.consumer:junit5:4.6.1'

	constraints {
		implementation('org.json:json:20230227') {
			because("CVE-2022-45688")
		}
	}
}

sonarqube {
	properties {
		property "sonar.projectName", "terra-workspace-data-service"
		property "sonar.projectKey", "DataBiosphere_workspace-data-service"
		property "sonar.organization", "broad-databiosphere"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events = ["passed", "failed", "skipped", "started"]
		exceptionFormat = "full"
		// should command-line test output show stdout/stderr?
		showStandardStreams = false
	}
}

jacocoTestReport {
	reports {
		// sonarqube requires XML coverage output to upload coverage data
		xml.required = true
	}
}

test {
	systemProperties['pact.rootDir'] = "$buildDir/pacts"
	systemProperties['pact.provider.version'] = "$project.version"
}

tasks.register("pactTests", Test) {
	useJUnitPlatform {
		includeTags "pact-test"
	}
	testLogging {
		showStandardStreams = true
	}
}

testing {
    suites {
        integrationTest(JvmTestSuite) {
            dependencies {
				implementation project(':service')
				implementation 'org.springframework.boot:spring-boot-starter-test'
				implementation 'org.liquibase:liquibase-core:4.21.1'
				implementation "org.glassfish.jersey.core:jersey-client:$jersey_version"
				implementation "org.glassfish.jersey.core:jersey-common:$jersey_version"
				implementation "org.glassfish.jersey.inject:jersey-hk2:$jersey_version"
            }
        }
    }
}

tasks.named('integrationTest') {
	testLogging {
		events = ["passed", "failed", "skipped", "started"]
		exceptionFormat = "full"
		// should command-line test output show stdout/stderr?
		showStandardStreams = false
	}
}
