import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'org.springframework.boot'
    id 'com.google.cloud.tools.jib'
    id 'org.sonarqube'
    id 'com.gorylenko.gradle-git-properties'
    id 'org.openapi.generator'
    id 'com.diffplug.spotless'
    id 'jacoco'
    id "au.com.dius.pact" version "4.6.1"
    id 'jvm-test-suite'
}

springBoot {
    buildInfo()
}

repositories {
    maven { url 'https://broadinstitute.jfrog.io/artifactory/maven-central' }
    mavenCentral()
    maven { url 'https://broadinstitute.jfrog.io/artifactory/libs-snapshot' }
    maven { url 'https://broadinstitute.jfrog.io/artifactory/libs-release' }
}

jib {
    from {
        // see https://github.com/broadinstitute/dsp-appsec-blessed-images/tree/main/jre
        image = "us.gcr.io/broad-dsp-gcr-public/debian/wds-debian-pg-dump:latest"
    }

    container {
        mainClass = 'org.databiosphere.workspacedataservice.WorkspaceDataServiceApplication'
        creationTime = "USE_CURRENT_TIMESTAMP"
    }
}

ext {
    parquet_mr_version = "1.13.1"
    hadoop_version = "3.3.6"
}

dependencies {
    // Azure libraries
    implementation 'com.microsoft.azure:applicationinsights-runtime-attach:3.4.18'
    implementation 'com.azure:azure-storage-blob:12.25.0'
    implementation 'com.azure:azure-identity:1.11.0' // authentication in azure environment
    implementation 'com.azure:azure-identity-extensions:1.1.10' // postgres password plugin

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.integration:spring-integration-jdbc'
    implementation 'org.aspectj:aspectjweaver' // required by spring-retry, not used directly
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation 'org.postgresql:postgresql'
    implementation 'org.webjars:webjars-locator-core' // versioned by spring dependency management
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'
    implementation 'io.sentry:sentry-logback:6.34.0'
    implementation 'org.liquibase:liquibase-core'
    implementation 'javax.cache:cache-api'
    implementation 'org.ehcache:ehcache:3.10.8:jakarta'
    implementation 'org.hashids:hashids:1.0.3'
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api'
    implementation 'com.google.mug:mug:6.6'

    // required by openapi-generated models and api interfaces
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.16'

    // Terra libraries
    implementation group: 'org.broadinstitute.dsde.workbench', name: 'sam-client_2.13', version: '0.1-752b4f3'
    implementation group: 'org.broadinstitute.dsde.workbench', name: 'leonardo-client_2.13', version: '1.3.6-22ee00b'
    implementation 'com.squareup.okhttp3:okhttp' // required by Sam client
    implementation "bio.terra:datarepo-jakarta-client:1.570.0-SNAPSHOT"
    implementation "bio.terra:workspace-manager-client:0.254.983-SNAPSHOT"
    implementation "bio.terra:java-pfb-library:0.15.0"
    implementation project(path: ':client')

    // Parquet, used for TDR snapshot import
    implementation "org.apache.parquet:parquet-common:$parquet_mr_version"
    implementation "org.apache.parquet:parquet-avro:$parquet_mr_version"
    implementation "org.apache.parquet:parquet-hadoop:$parquet_mr_version"

    // we need Hadoop libraries to read Parquet files for TDR import. However, Hadoop brings
    // a boatload of transitive dependencies we don't need, some of which (e.g. com.sun.xml.bind)
    // cause conflicts. Exclude a lot of the transitive deps. Inspired by https://stackoverflow.com/a/60067027
    def withoutHadoopExcludes = {
        exclude(group: 'log4j')
        exclude(group: 'org.slf4j')
        exclude(group: 'io.netty')
        exclude(group: 'org.mortbay.jetty')
        exclude(group: 'javax.servlet.jsp')
        exclude(group: 'com.sun.jersey')
        exclude(group: 'com.sun.xml.bind')
        exclude(group: 'org.apache.curator')
        exclude(group: 'org.apache.zookeeper')
        exclude(group: 'org.apache.kerby')
        exclude(group: 'com.google.protobuf')
    }
    implementation "org.apache.hadoop:hadoop-common:$hadoop_version", withoutHadoopExcludes
    implementation "org.apache.hadoop:hadoop-mapreduce-client-core:$hadoop_version", withoutHadoopExcludes

    // Jersey libs, required by WSM client (and maybe other clients?), version managed by Spring
    implementation "org.glassfish.jersey.inject:jersey-hk2"
    implementation "org.glassfish.jersey.core:jersey-client"
    implementation "org.glassfish.jersey.core:jersey-common"

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    runtimeOnly 'org.webjars.npm:swagger-ui-dist:5.9.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation project(':client')
    testImplementation 'au.com.dius.pact.consumer:junit5:4.6.1'
    testImplementation 'org.junit-pioneer:junit-pioneer:2.1.0'

    constraints {
        implementation('org.json:json:20231013') {
            because("CVE-2022-45688")
        }
        // commons-compress required by org.apache.avro:avro:1.11.3, required by java-pfb-library:0.14.0
        implementation('org.apache.commons:commons-compress:1.24.0') {
            because("CVE-2023-42503")
        }
        implementation('org.xerial.snappy:snappy-java:1.1.10.4') {
            because("CVE-2023-34453, CVE-2023-34454, CVE-2023-34455, CVE-2023-43642")
        }
        implementation('org.codehaus.jettison:jettison:1.5.4') {
            because("CVE-2022-40149, CVE-2022-40150, CVE-2022-45685, CVE-2022-45693, CVE-2023-1436")
        }
    }
}

// generate server stubs, for WDS's v1 APIs only
tasks.register('generateApiInterfaces', GenerateTask) {
    generatorName = "spring"
    library = "spring-boot"
    inputSpec = "$rootDir/service/src/main/resources/static/swagger/apis-v1.yaml"
    outputDir = "$rootDir/service"
    cleanupOutput = false // else would delete the /service directory
    apiPackage = "org.databiosphere.workspacedataservice.generated"
    // apiNameSuffix does not work; see https://github.com/OpenAPITools/openapi-generator/issues/8822
    // apiNameSuffix = "Server" // disambiguate from classes in the generated client
    modelPackage = "org.databiosphere.workspacedataservice.generated"
    modelNameSuffix = "ServerModel"   // disambiguate from classes in the generated client
    apiFilesConstrainedTo.set([""])   // empty string means generate all apis
    modelFilesConstrainedTo.set([""]) // empty string means generate all models
    supportingFilesConstrainedTo.set([]) // empty array means generate none
    skipOperationExample = true // example responses require the ApiUtil.java supporting file
    configOptions.set([
        useJakartaEe           : "true", // for Spring Boot 3
        interfaceOnly          : "true", // Java interfaces only; no controllers or implementation classes
        useTags                : "true", // use the OpenAPI tag to classify apis, not the first segment of the api path
        hideGenerationTimestamp: "true"  // hidden to prevent unnecessary diff noise on unrelated changes
    ])

}


boolean isCiServer = System.getenv().containsKey("CI") && System.getenv().get("CI").toBoolean()

// kill switch for spotless, intended for one-off contingencies only, like when
// making changes which necessarily can't be formatted by spotless, like the initial
// commit of its config
boolean spotlessEnabled = true

spotless {
    java {
        targetExclude "${buildDir}/**"
        targetExclude "**/swagger-code/**"
        targetExclude "**/generated/**"
        googleJavaFormat('1.18.1')
        toggleOffOn() // allow spotless:off & spotless:on to protect code from formatting
    }
}
spotlessJavaCheck.onlyIf({ spotlessEnabled })

// multiple gradle tasks need generateApiInterfaces to run before they do
spotlessJava.dependsOn(generateApiInterfaces)
compileJava.dependsOn(generateApiInterfaces)
tasks.withType(ProcessResources).configureEach {
    it.dependsOn(generateApiInterfaces)
}

// Run spotless check when running in github actions, otherwise run spotless apply.
compileJava {
    if (spotlessEnabled) {
        if (isCiServer) {
            dependsOn(spotlessCheck)
        } else {
            dependsOn(spotlessApply)
        }
    }
}

sonar {
    properties {
        property "sonar.projectName", "terra-workspace-data-service"
        property "sonar.projectKey", "DataBiosphere_workspace-data-service"
        property "sonar.organization", "broad-databiosphere"
        property "sonar.host.url", "https://sonarcloud.io"
        // exclude generated files from Sonar scans
        property "sonar.exclusions", "service/src/main/java/org/databiosphere/workspacedataservice/generated/**/*"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events = ["passed", "failed", "skipped", "started"]
        exceptionFormat = "full"
        // should command-line test output show stdout/stderr?
        showStandardStreams = false
    }
}

jacocoTestReport {
    reports {
        // sonarqube requires XML coverage output to upload coverage data
        xml.required = true
    }
}

test {
    systemProperties['pact.rootDir'] = "$buildDir/pacts"
    systemProperties['pact.provider.version'] = "$project.version"
}

tasks.register("pactTests", Test) {
    useJUnitPlatform {
        includeTags "pact-test"
    }
    testLogging {
        showStandardStreams = true
    }
}

testing {
    suites {
        integrationTest(JvmTestSuite) {
            dependencies {
                implementation project(':service')
                implementation project(':client')
                implementation 'org.springframework.boot:spring-boot-starter-test'
                implementation 'org.springframework.boot:spring-boot-starter-jdbc'
                implementation 'org.liquibase:liquibase-core'
                implementation "org.glassfish.jersey.core:jersey-client"
                implementation "org.glassfish.jersey.core:jersey-common"
                implementation "org.glassfish.jersey.inject:jersey-hk2"
            }
        }
    }
}

tasks.named('integrationTest') {
    testLogging {
        events = ["passed", "failed", "skipped", "started"]
        exceptionFormat = "full"
        // should command-line test output show stdout/stderr?
        showStandardStreams = false
    }
}
