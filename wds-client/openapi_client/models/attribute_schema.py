# coding: utf-8

"""
    Workspace Data Service

    This page lists both current and proposed APIs. The proposed APIs which have not yet been implemented are marked as deprecated. This is incongruous, but by using the deprecated flag, we can force swagger-ui to display those endpoints differently.  Error codes and responses for proposed APIs are likely to change as we gain more clarity on their implementation.  As of v0.2, all APIs are subject to change without notice.   # noqa: E501

    The version of the OpenAPI document: v0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AttributeSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'datatype': 'str',
        'relates_to': 'str'
    }

    attribute_map = {
        'name': 'name',
        'datatype': 'datatype',
        'relates_to': 'relatesTo'
    }

    def __init__(self, name=None, datatype=None, relates_to=None, local_vars_configuration=None):  # noqa: E501
        """AttributeSchema - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._datatype = None
        self._relates_to = None
        self.discriminator = None

        self.name = name
        self.datatype = datatype
        if relates_to is not None:
            self.relates_to = relates_to

    @property
    def name(self):
        """Gets the name of this AttributeSchema.  # noqa: E501

        name of this attribute.  # noqa: E501

        :return: The name of this AttributeSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttributeSchema.

        name of this attribute.  # noqa: E501

        :param name: The name of this AttributeSchema.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def datatype(self):
        """Gets the datatype of this AttributeSchema.  # noqa: E501

        Datatype of this attribute. The enum of datatypes is in flux and will change. Please comment at https://docs.google.com/document/d/1d352ZoN5kEYWPjy0NqqWGxdf7HEu5VEdrLmiAv7dMmQ/edit#heading=h.naxag0augkgf.   # noqa: E501

        :return: The datatype of this AttributeSchema.  # noqa: E501
        :rtype: str
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype):
        """Sets the datatype of this AttributeSchema.

        Datatype of this attribute. The enum of datatypes is in flux and will change. Please comment at https://docs.google.com/document/d/1d352ZoN5kEYWPjy0NqqWGxdf7HEu5VEdrLmiAv7dMmQ/edit#heading=h.naxag0augkgf.   # noqa: E501

        :param datatype: The datatype of this AttributeSchema.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and datatype is None:  # noqa: E501
            raise ValueError("Invalid value for `datatype`, must not be `None`")  # noqa: E501
        allowed_values = ["boolean", "date", "datetime", "string", "json", "long", "double", "relation"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and datatype not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `datatype` ({0}), must be one of {1}"  # noqa: E501
                .format(datatype, allowed_values)
            )

        self._datatype = datatype

    @property
    def relates_to(self):
        """Gets the relates_to of this AttributeSchema.  # noqa: E501

        Name of type to which this attribute relates. Only present if this is a relation attribute.  # noqa: E501

        :return: The relates_to of this AttributeSchema.  # noqa: E501
        :rtype: str
        """
        return self._relates_to

    @relates_to.setter
    def relates_to(self, relates_to):
        """Sets the relates_to of this AttributeSchema.

        Name of type to which this attribute relates. Only present if this is a relation attribute.  # noqa: E501

        :param relates_to: The relates_to of this AttributeSchema.  # noqa: E501
        :type: str
        """

        self._relates_to = relates_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttributeSchema):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttributeSchema):
            return True

        return self.to_dict() != other.to_dict()
