# coding: utf-8

"""
    Workspace Data Service

    This page lists both current and proposed APIs. The proposed APIs which have not yet been implemented are marked as deprecated. This is incongruous, but by using the deprecated flag, we can force swagger-ui to display those endpoints differently.  Error codes and responses for proposed APIs are likely to change as we gain more clarity on their implementation.  As of v0.2, all APIs are subject to change without notice.   # noqa: E501

    The version of the OpenAPI document: v0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class StackTraceElement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'class_name': 'str',
        'method_name': 'str',
        'file_name': 'str',
        'line_number': 'int'
    }

    attribute_map = {
        'class_name': 'className',
        'method_name': 'methodName',
        'file_name': 'fileName',
        'line_number': 'lineNumber'
    }

    def __init__(self, class_name=None, method_name=None, file_name=None, line_number=None, local_vars_configuration=None):  # noqa: E501
        """StackTraceElement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._class_name = None
        self._method_name = None
        self._file_name = None
        self._line_number = None
        self.discriminator = None

        self.class_name = class_name
        self.method_name = method_name
        self.file_name = file_name
        self.line_number = line_number

    @property
    def class_name(self):
        """Gets the class_name of this StackTraceElement.  # noqa: E501

        class name  # noqa: E501

        :return: The class_name of this StackTraceElement.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this StackTraceElement.

        class name  # noqa: E501

        :param class_name: The class_name of this StackTraceElement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and class_name is None:  # noqa: E501
            raise ValueError("Invalid value for `class_name`, must not be `None`")  # noqa: E501

        self._class_name = class_name

    @property
    def method_name(self):
        """Gets the method_name of this StackTraceElement.  # noqa: E501

        method name  # noqa: E501

        :return: The method_name of this StackTraceElement.  # noqa: E501
        :rtype: str
        """
        return self._method_name

    @method_name.setter
    def method_name(self, method_name):
        """Sets the method_name of this StackTraceElement.

        method name  # noqa: E501

        :param method_name: The method_name of this StackTraceElement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and method_name is None:  # noqa: E501
            raise ValueError("Invalid value for `method_name`, must not be `None`")  # noqa: E501

        self._method_name = method_name

    @property
    def file_name(self):
        """Gets the file_name of this StackTraceElement.  # noqa: E501

        source file name  # noqa: E501

        :return: The file_name of this StackTraceElement.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this StackTraceElement.

        source file name  # noqa: E501

        :param file_name: The file_name of this StackTraceElement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_name is None:  # noqa: E501
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def line_number(self):
        """Gets the line_number of this StackTraceElement.  # noqa: E501

        line number  # noqa: E501

        :return: The line_number of this StackTraceElement.  # noqa: E501
        :rtype: int
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """Sets the line_number of this StackTraceElement.

        line number  # noqa: E501

        :param line_number: The line_number of this StackTraceElement.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and line_number is None:  # noqa: E501
            raise ValueError("Invalid value for `line_number`, must not be `None`")  # noqa: E501

        self._line_number = line_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StackTraceElement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StackTraceElement):
            return True

        return self.to_dict() != other.to_dict()
