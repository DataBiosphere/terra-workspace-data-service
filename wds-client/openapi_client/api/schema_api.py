# coding: utf-8

"""
    Workspace Data Service

    This page lists both current and proposed APIs. The proposed APIs which have not yet been implemented are marked as deprecated. This is incongruous, but by using the deprecated flag, we can force swagger-ui to display those endpoints differently.  Error codes and responses for proposed APIs are likely to change as we gain more clarity on their implementation.  As of v0.2, all APIs are subject to change without notice.   # noqa: E501

    The version of the OpenAPI document: v0.2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SchemaApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_attribute(self, instanceid, v, type, attribute, **kwargs):  # noqa: E501
        """Delete attribute (pending)  # noqa: E501

        Delete attribute. This deletes all values for this attribute within the specified type.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_attribute(instanceid, v, type, attribute, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param str type: Record type (required)
        :param str attribute: Attribute name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_attribute_with_http_info(instanceid, v, type, attribute, **kwargs)  # noqa: E501

    def delete_attribute_with_http_info(self, instanceid, v, type, attribute, **kwargs):  # noqa: E501
        """Delete attribute (pending)  # noqa: E501

        Delete attribute. This deletes all values for this attribute within the specified type.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_attribute_with_http_info(instanceid, v, type, attribute, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param str type: Record type (required)
        :param str attribute: Attribute name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'instanceid',
            'v',
            'type',
            'attribute'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_attribute" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `delete_attribute`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `delete_attribute`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `delete_attribute`")  # noqa: E501
        # verify the required parameter 'attribute' is set
        if self.api_client.client_side_validation and ('attribute' not in local_var_params or  # noqa: E501
                                                        local_var_params['attribute'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `attribute` when calling `delete_attribute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501
        if 'v' in local_var_params:
            path_params['v'] = local_var_params['v']  # noqa: E501
        if 'type' in local_var_params:
            path_params['type'] = local_var_params['type']  # noqa: E501
        if 'attribute' in local_var_params:
            path_params['attribute'] = local_var_params['attribute']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{instanceid}/types/{type}/attributes/{v}/{attribute}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_record_type(self, instanceid, v, type, **kwargs):  # noqa: E501
        """Delete record type  # noqa: E501

        Delete record type. All records of this type will be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_record_type(instanceid, v, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param str type: Record type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_record_type_with_http_info(instanceid, v, type, **kwargs)  # noqa: E501

    def delete_record_type_with_http_info(self, instanceid, v, type, **kwargs):  # noqa: E501
        """Delete record type  # noqa: E501

        Delete record type. All records of this type will be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_record_type_with_http_info(instanceid, v, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param str type: Record type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'instanceid',
            'v',
            'type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_record_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `delete_record_type`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `delete_record_type`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `delete_record_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501
        if 'v' in local_var_params:
            path_params['v'] = local_var_params['v']  # noqa: E501
        if 'type' in local_var_params:
            path_params['type'] = local_var_params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{instanceid}/types/{v}/{type}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def describe_all_record_types(self, instanceid, v, **kwargs):  # noqa: E501
        """Describe all record types  # noqa: E501

        Returns the schema definition for all types in this instance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.describe_all_record_types(instanceid, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[RecordTypeSchema]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.describe_all_record_types_with_http_info(instanceid, v, **kwargs)  # noqa: E501

    def describe_all_record_types_with_http_info(self, instanceid, v, **kwargs):  # noqa: E501
        """Describe all record types  # noqa: E501

        Returns the schema definition for all types in this instance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.describe_all_record_types_with_http_info(instanceid, v, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[RecordTypeSchema], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'instanceid',
            'v'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method describe_all_record_types" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `describe_all_record_types`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `describe_all_record_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501
        if 'v' in local_var_params:
            path_params['v'] = local_var_params['v']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{instanceid}/types/{v}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RecordTypeSchema]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def describe_attribute(self, instanceid, v, type, attribute, **kwargs):  # noqa: E501
        """Describe attribute (pending)  # noqa: E501

        Returns the schema definition for this attribute.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.describe_attribute(instanceid, v, type, attribute, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param str type: Record type (required)
        :param str attribute: Attribute name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AttributeSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.describe_attribute_with_http_info(instanceid, v, type, attribute, **kwargs)  # noqa: E501

    def describe_attribute_with_http_info(self, instanceid, v, type, attribute, **kwargs):  # noqa: E501
        """Describe attribute (pending)  # noqa: E501

        Returns the schema definition for this attribute.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.describe_attribute_with_http_info(instanceid, v, type, attribute, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param str type: Record type (required)
        :param str attribute: Attribute name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AttributeSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'instanceid',
            'v',
            'type',
            'attribute'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method describe_attribute" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `describe_attribute`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `describe_attribute`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `describe_attribute`")  # noqa: E501
        # verify the required parameter 'attribute' is set
        if self.api_client.client_side_validation and ('attribute' not in local_var_params or  # noqa: E501
                                                        local_var_params['attribute'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `attribute` when calling `describe_attribute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501
        if 'v' in local_var_params:
            path_params['v'] = local_var_params['v']  # noqa: E501
        if 'type' in local_var_params:
            path_params['type'] = local_var_params['type']  # noqa: E501
        if 'attribute' in local_var_params:
            path_params['attribute'] = local_var_params['attribute']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{instanceid}/types/{type}/attributes/{v}/{attribute}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttributeSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def describe_record_type(self, instanceid, v, type, **kwargs):  # noqa: E501
        """Describe record type  # noqa: E501

        Returns the schema definition for this type.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.describe_record_type(instanceid, v, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param str type: Record type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RecordTypeSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.describe_record_type_with_http_info(instanceid, v, type, **kwargs)  # noqa: E501

    def describe_record_type_with_http_info(self, instanceid, v, type, **kwargs):  # noqa: E501
        """Describe record type  # noqa: E501

        Returns the schema definition for this type.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.describe_record_type_with_http_info(instanceid, v, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param str type: Record type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RecordTypeSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'instanceid',
            'v',
            'type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method describe_record_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `describe_record_type`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `describe_record_type`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `describe_record_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501
        if 'v' in local_var_params:
            path_params['v'] = local_var_params['v']  # noqa: E501
        if 'type' in local_var_params:
            path_params['type'] = local_var_params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{instanceid}/types/{v}/{type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RecordTypeSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_attribute(self, instanceid, v, type, attribute, **kwargs):  # noqa: E501
        """Update attribute (pending)  # noqa: E501

        Update attribute. All records of the specified type that contain the old attribute will now have the new attribute instead. When changing datatypes, WDS will make a best effort to cast the existing values into the new datatype. Any values that cannot be successfully cast will be changed to null. Returns the updated attribute definition.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_attribute(instanceid, v, type, attribute, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param str type: Record type (required)
        :param str attribute: Attribute name (required)
        :param AttributeSchema attribute_schema:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AttributeSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_attribute_with_http_info(instanceid, v, type, attribute, **kwargs)  # noqa: E501

    def update_attribute_with_http_info(self, instanceid, v, type, attribute, **kwargs):  # noqa: E501
        """Update attribute (pending)  # noqa: E501

        Update attribute. All records of the specified type that contain the old attribute will now have the new attribute instead. When changing datatypes, WDS will make a best effort to cast the existing values into the new datatype. Any values that cannot be successfully cast will be changed to null. Returns the updated attribute definition.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_attribute_with_http_info(instanceid, v, type, attribute, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param str type: Record type (required)
        :param str attribute: Attribute name (required)
        :param AttributeSchema attribute_schema:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AttributeSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'instanceid',
            'v',
            'type',
            'attribute',
            'attribute_schema'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_attribute" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `update_attribute`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `update_attribute`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `update_attribute`")  # noqa: E501
        # verify the required parameter 'attribute' is set
        if self.api_client.client_side_validation and ('attribute' not in local_var_params or  # noqa: E501
                                                        local_var_params['attribute'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `attribute` when calling `update_attribute`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501
        if 'v' in local_var_params:
            path_params['v'] = local_var_params['v']  # noqa: E501
        if 'type' in local_var_params:
            path_params['type'] = local_var_params['type']  # noqa: E501
        if 'attribute' in local_var_params:
            path_params['attribute'] = local_var_params['attribute']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'attribute_schema' in local_var_params:
            body_params = local_var_params['attribute_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{instanceid}/types/{type}/attributes/{v}/{attribute}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttributeSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_record_type(self, instanceid, v, type, **kwargs):  # noqa: E501
        """Update record type (pending)  # noqa: E501

        Update record type. All records of the old type will be updated to the new type. This API can be used to rename a record type and/or to perform batch updates to this type's attributes; see also the updateAttribute API. This API cannot be used to delete attributes; use deleteAttribute instead. Returns the updated type definition.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_record_type(instanceid, v, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param str type: Record type (required)
        :param RecordTypeSchema record_type_schema:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RecordTypeSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_record_type_with_http_info(instanceid, v, type, **kwargs)  # noqa: E501

    def update_record_type_with_http_info(self, instanceid, v, type, **kwargs):  # noqa: E501
        """Update record type (pending)  # noqa: E501

        Update record type. All records of the old type will be updated to the new type. This API can be used to rename a record type and/or to perform batch updates to this type's attributes; see also the updateAttribute API. This API cannot be used to delete attributes; use deleteAttribute instead. Returns the updated type definition.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_record_type_with_http_info(instanceid, v, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str instanceid: WDS instance id; by convention equal to workspace id (required)
        :param str v: API version (required)
        :param str type: Record type (required)
        :param RecordTypeSchema record_type_schema:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RecordTypeSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'instanceid',
            'v',
            'type',
            'record_type_schema'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_record_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `update_record_type`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `update_record_type`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `update_record_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501
        if 'v' in local_var_params:
            path_params['v'] = local_var_params['v']  # noqa: E501
        if 'type' in local_var_params:
            path_params['type'] = local_var_params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'record_type_schema' in local_var_params:
            body_params = local_var_params['record_type_schema']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{instanceid}/types/{v}/{type}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RecordTypeSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
