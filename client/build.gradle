plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'

    id 'com.jfrog.artifactory' version '5.2.0'
    id 'org.openapi.generator'
    id 'com.diffplug.spotless'
}

repositories {
    maven { url 'https://broadinstitute.jfrog.io/artifactory/maven-central' }
    mavenCentral()
}

ext {
    // these will be overridden by dependencies-jakarta.gradle or dependencies-javax.gradle
    useJakartaEe = ""
    libraryName = ""
}

// default to javax, since WDS is currently on Spring Boot 2. -Pjakarta=true overrides
// the default and creates a Jakarta-based client.
if (project.hasProperty("jakarta") && "false".equalsIgnoreCase(project.getProperty("jakarta"))) {
    apply from: "dependencies-javax.gradle"
} else {
    apply from: "dependencies-jakarta.gradle"
}

apply from: 'artifactory.gradle'
apply from: 'swagger.gradle'

boolean isCiServer = System.getenv().containsKey("CI") && System.getenv().get("CI").toBoolean()

// kill switch for spotless, intended for one-off contingencies only, like when
// making changes which necessarily can't be formatted by spotless, like the initial
// commit of its config
boolean spotlessEnabled = true

spotless {
    java {
        targetExclude "${layout.buildDirectory.asFile}/**"
        targetExclude "**/swagger-code/**"
        targetExclude "**/generated/**"
        googleJavaFormat('1.18.1')
        toggleOffOn() // allow spotless:off & spotless:on to protect code from formatting
    }
}
spotlessJavaCheck.onlyIf({ spotlessEnabled })

// Run spotless check when running in github actions, otherwise run spotless apply.
compileJava {
    if (spotlessEnabled) {
        if (isCiServer) {
            dependsOn(spotlessCheck)
        } else {
            dependsOn(spotlessApply)
        }
    }
}
