plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'

//    id 'com.jfrog.artifactory' version '5.2.5'
    id 'org.openapi.generator'
    id 'com.diffplug.spotless'
    id 'com.google.cloud.artifactregistry.gradle-plugin' version '2.1.5'

}

def garProjectId = System.getenv("GOOGLE_CLOUD_PROJECT")
def garLocation = System.getenv("GAR_LOCATION")
def garRepoId = System.getenv("GAR_REPOSITORY_ID")

// Debug environment variables
println "=== GAR Configuration Debug ==="
println "GAR Project ID: '${garProjectId}'"
println "GAR Location: '${garLocation}'"
println "GAR Repository ID: '${garRepoId}'"
println "All environment variables:"
System.getenv().each { key, value ->
    if (key.startsWith("GAR") || key.startsWith("GOOGLE")) {
        println "  ${key}: ${value}"
    }
}
println "=== End Debug ==="

repositories {
    maven { url 'https://us-central1-maven.pkg.dev/dsp-artifact-registry/maven-central/' }
    mavenCentral()
}

dependencies {
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:4.0.0'
}

java {
    // Builds sources into the published package as part of the 'assemble' task.
    withSourcesJar()
}

publishing {
    publications {
        wdsClient(MavenPublication) {
            artifactId = "workspacedataservice-client-okhttp-jakarta"
            from components.java
            versionMapping {
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        if (garProjectId && garLocation && garRepoId) {
            println "Configuring GAR repository with:"
            println "  Project: ${garProjectId}"
            println "  Location: ${garLocation}"
            println "  Repository: ${garRepoId}"
            
            // Try both artifactregistry:// and https:// protocols
            maven {
                name = "GoogleArtifactRegistry"
                url = "artifactregistry://${garLocation}-maven.pkg.dev/${garProjectId}/${garRepoId}"
            }
            maven {
                name = "GoogleArtifactRegistryHTTPS"
                url = "https://${garLocation}-maven.pkg.dev/${garProjectId}/${garRepoId}"
                println "Also configured HTTPS GAR repository"
            }
        } else {
            println "GAR environment variables missing or incomplete:"
            println "  GOOGLE_CLOUD_PROJECT: '${garProjectId}'"
            println "  GAR_LOCATION: '${garLocation}'"
            println "  GAR_REPOSITORY_ID: '${garRepoId}'"
            
            // Add a dummy repository so publish has something to do
            maven {
                name = "DummyRepo"
                url = "file://${System.getProperty('java.io.tmpdir')}/dummy-repo"
                println "Added dummy repository for testing"
            }
        }
    }
}

apply from: 'swagger.gradle'

boolean isCiServer = System.getenv().containsKey("CI") && System.getenv().get("CI").toBoolean()

// kill switch for spotless, intended for one-off contingencies only, like when
// making changes which necessarily can't be formatted by spotless, like the initial
// commit of its config
boolean spotlessEnabled = true

spotless {
    java {
        targetExclude "${layout.buildDirectory.asFile}/**"
        targetExclude "**/swagger-code/**"
        targetExclude "**/generated/**"
        googleJavaFormat('1.18.1')
        toggleOffOn() // allow spotless:off & spotless:on to protect code from formatting
    }
}
spotlessJavaCheck.onlyIf({ spotlessEnabled })

// Run spotless check when running in github actions, otherwise run spotless apply.
compileJava {
    if (spotlessEnabled) {
        if (isCiServer) {
            dependsOn(spotlessCheck)
        } else {
            dependsOn(spotlessApply)
        }
    }
}

tasks.named("publish") {
    outputs.upToDateWhen { false }
    dependsOn 'fixOpenApiGenerate'
    dependsOn 'jar'
    dependsOn 'sourcesJar'
}
