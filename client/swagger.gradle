import java.util.regex.Matcher

ext {
}

dependencies {
	//Need to include libraries for generated code to work
	api 'com.google.code.gson:gson:2.9.1'
	api 'io.gsonfire:gson-fire:1.8.5'
	api 'com.squareup.okhttp3:okhttp:4.10.0'
	api 'com.squareup.okhttp3:logging-interceptor:4.10.0'

	implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
	implementation 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'
}

openApiGenerate {
	inputSpec = "$rootDir//service/src/main/resources/static/swagger/openapi-docs.yaml".toString()
	outputDir = "$buildDir/generated".toString()
	generatorName = 'java'
	library = 'okhttp-gson' // the default
	configOptions.set([
			disallowAdditionalPropertiesIfNotPresent: "false",
			useJakartaEe: "true", // for compatibility with Spring Boot 3
			prependFormOrBodyParameters: "true", // orders arguments in the Java client same as previous swagger-codegen
	])
	// see:
	// - https://github.com/OpenAPITools/openapi-generator/issues/15072
	// - https://github.com/OpenAPITools/openapi-generator/issues/10848
	// - https://github.com/OpenAPITools/openapi-generator/issues/8156
	generateAliasAsModel = false // true to create RecordAttributes instead of Map<String, Object>
	invokerPackage = "${artifactGroup}.client".toString()
	modelPackage = "${artifactGroup}.model".toString()
	apiPackage = "${artifactGroup}.api".toString()
	// we may want to generate tests or doc later ...
	generateModelTests = false
	generateModelDocumentation = false
	generateApiTests = false
	generateApiDocumentation = false
}

idea.module.generatedSourceDirs = [file("${openApiGenerate.outputDir.get()}/src/main")]
sourceSets.main.java.srcDir files("${openApiGenerate.outputDir.get()}/src/main")
compileJava.dependsOn tasks.getByName('openApiGenerate')
sourcesJar.dependsOn tasks.getByName('openApiGenerate')
