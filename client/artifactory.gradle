// This and the test below makes sure the build will fail reasonably if you try
// to publish without the environment variables defined.
//def artifactory_username = System.getenv('ARTIFACTORY_USERNAME')
//def artifactory_password = System.getenv('ARTIFACTORY_PASSWORD')
//def artifactory_repo_key = System.getenv('ARTIFACTORY_REPO_KEY') ?: 'libs-snapshot-local'
//
//gradle.taskGraph.whenReady { taskGraph ->
//    if (taskGraph.hasTask(artifactoryPublish) &&
//        (artifactory_username == null || artifactory_password == null)) {
//        throw new GradleException('Set env vars ARTIFACTORY_USERNAME and ARTIFACTORY_PASSWORD to publish')
//    }
//}

def garProjectId = System.getenv("GOOGLE_CLOUD_PROJECT")
def garLocation = System.getenv("GAR_LOCATION")
def garRepoId = System.getenv("GAR_REPOSITORY_ID")

java {
    // Builds sources into the published package as part of the 'assemble' task.
    withSourcesJar()
}

publishing {
    publications {
        wdsClient(MavenPublication) {
            artifactId = "workspacedataservice-client-okhttp-jakarta"
            from components.java
            versionMapping {
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            name = "GoogleArtifactRegistry"
            url = uri("artifactregistry://${garLocation}-maven.pkg.dev/${garProjectId}/${garRepoId}")
        }
        // Alternative repository using HTTPS (in case GAR plugin has issues)
        maven {
            name = "GoogleArtifactRegistryHTTPS"
            url = uri("https://${garLocation}-maven.pkg.dev/${garProjectId}/${garRepoId}")
            credentials {
                username = "_token"
                password = providers.environmentVariable("GOOGLE_OAUTH_ACCESS_TOKEN").orElse("").get()
            }
        }
    }
}

// Ensure publishing depends on code generation
tasks.withType(PublishToMavenRepository) {
    dependsOn 'fixOpenApiGenerate'
    dependsOn 'jar'
    dependsOn 'sourcesJar'
}

tasks.withType(GenerateModuleMetadata) {
    dependsOn 'fixOpenApiGenerate'
}

// Debug task to show publishing configuration
task debugPublishing {
    doLast {
        println "=== Publishing Debug Information ==="
        println "GAR Project ID: ${garProjectId}"
        println "GAR Location: ${garLocation}"
        println "GAR Repository ID: ${garRepoId}"
        println "Google OAuth Access Token present: ${providers.environmentVariable('GOOGLE_OAUTH_ACCESS_TOKEN').isPresent()}"
        
        publishing.publications.each { pub ->
            println "Publication: ${pub.name}"
            println "  Group ID: ${pub.groupId}"
            println "  Artifact ID: ${pub.artifactId}"
            println "  Version: ${pub.version}"
            println "  Artifacts: ${pub.artifacts.collect { it.file?.name ?: 'null' }}"
        }
        
        publishing.repositories.each { repo ->
            println "Repository: ${repo.name}"
            println "  URL: ${repo.url}"
        }
    }
}

// Test task to try publishing locally (dry run style check)
task testLocalPublish {
    dependsOn 'fixOpenApiGenerate', 'jar', 'sourcesJar'
    doLast {
        println "=== Testing Publication Status ==="
        
        // Check if artifacts exist
        def jarTask = tasks.getByName('jar')
        def sourcesJarTask = tasks.getByName('sourcesJar')
        
        println "Main JAR exists: ${jarTask.archiveFile.get().asFile.exists()}"
        println "Main JAR path: ${jarTask.archiveFile.get().asFile.absolutePath}"
        println "Sources JAR exists: ${sourcesJarTask.archiveFile.get().asFile.exists()}"
        println "Sources JAR path: ${sourcesJarTask.archiveFile.get().asFile.absolutePath}"
        
        // Show publication details
        publishing.publications.wdsClient.artifacts.each { artifact ->
            println "Artifact: ${artifact.file.name} (classifier: ${artifact.classifier ?: 'none'})"
        }
    }
}

// Task to check if publish task would be UP-TO-DATE
task checkPublishUpToDate {
    dependsOn 'fixOpenApiGenerate', 'jar', 'sourcesJar'
    doLast {
        println "=== Checking Publish Task State ==="
        
        def publishTasks = tasks.withType(PublishToMavenRepository)
        publishTasks.each { task ->
            println "Task: ${task.name}"
            println "  Enabled: ${task.enabled}"
            println "  Actions: ${task.actions.size()}"
            println "  Inputs files: ${task.inputs.files.files.size()}"
            println "  Output files: ${task.outputs.files.files.size()}"
        }
    }
}

//artifactory {
//    publish {
//        contextUrl = 'https://broadinstitute.jfrog.io/broadinstitute/'
//        repository {
//            repoKey = artifactory_repo_key // The Artifactory repository key to publish to
//            username = artifactory_username // The publisher user name
//            password = artifactory_password // The publisher password
//        }
//        defaults {
//            // This is how we tell the Artifactory Plugin which artifacts should be published to Artifactory.
//            // Reference to Gradle publications defined in the build script.
//            publications('wdsClient')
//            publishArtifacts = true
//            publishPom = true
//        }
//    }
//}
